// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1701590904_init.down.sql
// 1701590904_init.up.sql
// migrations.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1701590904_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _1701590904_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1701590904_initDownSql,
		"1701590904_init.down.sql",
	)
}

func _1701590904_initDownSql() (*asset, error) {
	bytes, err := _1701590904_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1701590904_init.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1702232558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1701590904_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\x51\x73\x9a\x40\x10\xc7\xdf\xfd\x14\xfb\x16\xe3\x38\x71\x32\xf2\x94\x3c\x11\xbd\x24\x4c\xf1\x68\x10\x9a\xe4\xc9\x39\x81\x5a\xa6\x16\x2d\x47\x32\x4d\x3e\x7d\xe7\xc0\x43\x90\xbb\x03\xd4\x0e\x7d\xf4\x76\xf9\xef\xce\xee\x6f\x6f\x91\xd1\x00\x48\x44\xc3\x4f\x18\x8c\x7a\x13\x1b\xe9\x0e\x02\x47\xbf\x33\x11\x6c\xdf\x96\xeb\xd0\xbb\x22\xd1\x27\x0d\x3d\xe8\xf7\x00\x00\x42\x1f\xc2\x28\x09\x56\x41\x0c\xd8\x72\x00\xbb\xa6\x39\x4c\x0d\xde\xc6\x0f\xc0\xfb\x41\x62\xe2\x25\x41\x0c\xef\x24\xfe\x08\xa3\x55\x66\xf3\x03\xea\xc5\xe1\x36\x09\x37\x51\xd5\xa5\x77\x79\xdb\xe3\x71\xe7\xe8\xc9\x45\x78\x72\x10\x7a\x11\xfa\x0b\x1a\xfc\x4e\xa5\xf4\x39\x8f\x9f\xfe\x9c\x3b\xba\xed\xc0\xb3\xe1\x3c\xc2\x75\x7a\x60\xe0\x89\x8d\x66\x08\x3b\x70\xf7\xba\x3b\xc2\x16\xcc\x0c\xfc\x4d\x37\x5d\x94\xff\xd6\x5f\xf6\xbf\x27\xfa\xe4\x11\xc1\xf5\x6d\xaf\xa7\x9b\x0e\xb2\xd5\x49\x80\xf5\x8c\xd1\x94\x89\x97\xac\x57\xa1\x9f\x3f\x9f\x15\xcf\xc2\xe6\x81\x0f\x64\xe6\x89\x65\xba\x33\xcc\x0a\x39\x47\x0e\x4c\xd1\xbd\xee\x9a\x0e\x44\xc1\x9f\xe4\x9d\xac\xfb\x17\xa2\xa0\x17\x37\x37\x71\xb0\xf2\xd6\x84\xd2\xcb\xda\x30\x59\x99\xa6\x53\x98\x58\x78\xee\xd8\xba\x81\x1d\xd8\xa9\x6d\x7f\x06\x1f\xf0\xd5\x36\x66\xba\xfd\x0a\x5f\xd0\x2b\xf4\x43\xff\x38\x41\xd6\xed\x45\xb1\xad\x2e\x36\x9e\x5c\x04\x7d\x66\x18\x16\x1b\xce\xf4\x47\x03\x58\xbe\xd1\x30\x0a\x28\x5d\xa4\x9c\x48\x48\x2b\x3b\x75\x01\x5c\x29\x83\x8e\xb9\x13\xe5\x52\xc1\xaf\xe4\xa4\xa6\xb0\x5c\xdd\x36\x30\x8a\x32\x69\xc8\x64\xe9\x51\x11\x49\x65\xed\x76\x5c\x9d\x29\xa8\x6c\x2c\x46\x03\xa0\x64\x2c\x83\x95\x99\x9a\x20\x2a\x36\x45\xe4\x97\x80\xde\xdc\x49\xc5\x28\x25\xe3\x8e\xc9\xdc\x67\x50\xe1\x91\x92\xb1\x9a\x42\x56\xb6\x36\xec\xed\x63\x35\x24\x8e\x92\xb1\xa8\xe5\x4c\x27\xed\x36\xab\xfc\x82\x75\xbc\x8c\x16\x3b\x3e\x52\x56\xc9\x8f\x26\xe7\x47\xeb\x8a\x1f\xad\x73\x7e\x34\x39\x3f\x5a\x1d\x3f\x5a\x4b\x7e\xb4\xb6\xfc\x68\xe2\x46\x6b\x27\xf2\x23\x95\x55\xf1\x93\x90\x44\xba\x2e\x33\x63\x0d\x43\xa7\x80\xc2\xf4\xbb\x46\xa5\x90\x43\x15\x16\x66\xac\xc1\x25\xad\x51\x2b\x60\x0a\x11\x9b\x22\xc3\x1e\x11\x76\x37\xd5\xaa\x10\x53\xcb\x8a\x5a\x4f\xc1\xcb\x76\x43\x13\xd5\x1b\x56\x6e\xaf\xa1\x26\xf7\x93\x93\x93\x39\xae\x37\x1e\x59\x87\xc9\x47\xad\x23\x2f\xab\x24\x60\x76\xcd\x73\x23\x3f\xd3\x0a\x67\x2a\x52\x79\xba\x1d\xc3\x7a\x90\x46\x85\x57\x6e\x57\x23\x9b\xd7\xbe\x0d\xb5\x07\xa1\x1b\x82\xcb\x9f\x12\xb1\x96\x2b\xe6\x2d\xe6\xf8\x72\xcb\x30\xef\xfe\xc9\x31\xda\xfe\x33\x69\x24\xba\x7b\x75\xf8\xce\xb4\xef\x2d\x1b\x19\x0f\x38\xd3\xce\x0c\x97\x60\xa3\x7b\x64\xb3\x06\xce\x0b\x5b\xfe\x3c\x91\x35\x59\x64\x4d\x1a\x59\x3b\x4b\x64\x7e\x7b\x09\x62\xef\x4c\xc2\xe8\xcc\xb6\xbf\x46\x36\xf1\x8a\x44\x21\x25\xec\x45\x7b\x41\x37\x6f\xb1\x27\xbd\x51\x44\xae\xff\x6e\x25\x09\xa2\x75\x3c\xf3\xf2\x8c\x2a\xe3\x2f\x70\x55\xdf\x04\xa2\xda\xb6\xb9\x14\xe4\xb9\x35\xbc\x1f\x04\x02\x22\xfa\x44\x71\x5a\x2f\xbd\x13\x62\x29\x16\x62\xd1\xbd\x09\xc2\x27\xb2\x9b\x39\x91\xa5\xe0\xb3\xc3\xce\xe4\xfb\x71\x40\xa9\xd4\xcc\x3f\xfb\x94\x37\xe1\xe1\x1f\xf0\x9a\xad\x5d\xdd\xa4\xbc\xf7\xe5\x63\x31\x1f\x15\xf1\xc6\x03\xf9\x1f\x4d\x62\x83\x11\x6c\x3e\x7b\xc7\x0f\xdd\xd1\xd3\x56\x8b\x7e\xdb\x8d\xd9\x4a\x7c\x7f\x57\x48\x10\xe1\x43\x9d\x9f\x0c\x25\x02\x05\x74\x0c\x3c\x45\x2f\x65\xb7\x74\x9a\x2c\x2c\xac\xb9\x3b\x37\xf0\x03\x2c\x93\x38\x08\xf6\x97\x87\x5a\x6a\x51\x1c\x80\xa6\xb2\xc3\xe2\xd8\x9c\xad\x82\xfb\xef\xb7\xd5\x45\x9c\xdb\x44\x9b\x38\x33\x9e\xb3\x99\x95\xaf\x77\xd5\x8c\x0e\x5d\x44\x89\x95\x7c\xce\x99\x9f\x84\xbc\x6a\x96\x12\xc2\x04\xb9\x0a\x3c\xcf\x99\x71\xf1\x65\xbb\x9a\x66\x11\x27\x41\x6e\xdc\x9c\x25\xf4\x37\x00\x00\xff\xff\x18\x00\xe4\xfb\x7d\x19\x00\x00")

func _1701590904_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1701590904_initUpSql,
		"1701590904_init.up.sql",
	)
}

func _1701590904_initUpSql() (*asset, error) {
	bytes, err := _1701590904_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1701590904_init.up.sql", size: 6525, mode: os.FileMode(420), modTime: time.Unix(1702232558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x31\x6b\xeb\x30\x10\xc7\x67\xdd\xa7\xd0\xf3\x10\x24\x48\xec\xe5\x4d\xef\x91\xa1\x34\x1d\x0a\x6d\x86\x94\xd0\xa1\x94\x20\x3b\x17\x45\xd4\x96\xcc\x49\x6e\x29\x25\xdf\xbd\x58\x96\x4d\x28\x1d\x92\xc9\x9c\xf9\xff\x7e\xff\xe3\xd4\xaa\xea\x4d\x69\xe4\x8d\xd1\xa4\x82\x71\xd6\x03\x98\xa6\x75\x14\xb8\x00\x96\x69\x13\x8e\x5d\x99\x57\xae\x29\xb4\xab\x95\xd5\x8b\x21\x88\xc5\xf8\x7d\xff\x9b\x01\xdb\xf1\x8b\x92\xc5\x5e\x05\x55\x2a\x8f\x45\xeb\x7c\xd0\x84\xfe\x0a\xd6\xbb\x8e\x2a\x2c\x0e\xa6\xc6\x0c\x58\x69\x6c\x2f\xbb\x8e\xd5\x6e\x97\xb8\x0c\x24\xc0\xa1\xb3\x15\x5f\xb9\xc7\x21\xb7\x2a\xc5\xbe\xdc\x6e\x1e\xb8\x0f\x64\xac\x96\x1c\x89\x1c\xf1\x2f\x60\x84\x03\xef\xf9\xbf\x25\x4f\x82\x7c\x93\x7e\x8a\x1b\xef\x31\xac\x55\x83\x5e\xc8\x39\x30\xd6\x5b\x85\x55\x0d\x4e\x22\xf1\xf2\x5a\x7e\x06\x9c\x0f\x46\xd9\x2b\x19\x23\x0c\x1d\x59\x1e\xe9\x18\x97\xc0\xd8\x49\x02\xb0\xe9\x29\x56\x2a\xa8\x08\x9d\xf7\x3e\x9b\x70\xbc\xb7\x3e\x28\x5b\xa1\x98\x36\x93\xc0\xcc\x21\x46\xff\x2c\xb9\x35\x75\xec\x48\x15\x48\x04\xec\xd4\x8b\x27\x59\x3a\x4d\xbe\xc6\x8f\xde\xf7\x14\x25\x93\x35\xd3\x6e\x31\xde\x69\xce\x7f\xac\x13\x6f\x74\x51\x5d\x4a\xf4\x75\xf9\xb6\x15\xf2\xff\x39\x30\x9b\x8d\xd3\xb8\xcb\x1d\xd1\xda\xdd\x1e\x95\xd5\xf8\xab\x2e\xcd\xd6\xd4\x70\x82\xef\x00\x00\x00\xff\xff\x85\xd7\x94\xdb\xb7\x02\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 695, mode: os.FileMode(420), modTime: time.Unix(1702232558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1701590904_init.down.sql": _1701590904_initDownSql,
	"1701590904_init.up.sql": _1701590904_initUpSql,
	"migrations.go": migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1701590904_init.down.sql": &bintree{_1701590904_initDownSql, map[string]*bintree{}},
	"1701590904_init.up.sql": &bintree{_1701590904_initUpSql, map[string]*bintree{}},
	"migrations.go": &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

