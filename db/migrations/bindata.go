// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1701590904_init.down.sql
// 1701590904_init.up.sql
// migrations.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1701590904_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x31\x0f\x82\x30\x10\x85\x77\x7e\x45\x67\x16\x06\xd9\x9c\x10\xd8\x4c\x34\xea\xde\x9c\x40\x4c\x13\xb8\xaa\x57\x25\xf1\xd7\x9b\x6a\x44\x5b\x90\xeb\xfa\xf8\xde\xc7\xeb\x25\xb1\x00\x7c\x90\xaa\x44\x9c\x44\xc5\x6e\xb3\x15\x87\x6c\xb5\x2e\x3f\x61\x9e\xed\xf3\xac\x28\x97\x51\x94\xc4\xe2\x78\x23\x85\x0d\x91\xac\x74\xdd\x78\xbc\xfb\xcd\xa9\x11\x2c\x3c\xd8\x26\x1e\x92\x8e\x90\xd4\x43\x0c\x18\xff\xa7\xef\xcc\xc1\xce\x9a\xcc\xc4\xbc\x21\x76\xe0\xa6\x03\xd5\x4a\x7d\x3d\x01\x2a\x02\xa3\x34\x7a\xb5\x09\x60\x2c\x98\xea\xb8\xd8\xaf\x40\xbe\x46\xcb\xfb\xe8\xe2\x7f\x20\x4e\x84\xd4\xf3\x22\x0b\x71\x22\xa8\x0c\x2f\xb2\x10\x27\xba\xb4\x35\x2f\xb2\x10\x27\x32\x40\x1d\xa0\x02\xde\x36\x90\xec\xb5\x02\xde\x88\xfc\x13\x29\x60\x13\xf1\x6b\xfa\x00\x4d\x3f\xa3\x99\x69\x7f\x4b\xcf\x00\x00\x00\xff\xff\x8a\x94\x01\x92\xe2\x03\x00\x00")

func _1701590904_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1701590904_initDownSql,
		"1701590904_init.down.sql",
	)
}

func _1701590904_initDownSql() (*asset, error) {
	bytes, err := _1701590904_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1701590904_init.down.sql", size: 994, mode: os.FileMode(420), modTime: time.Unix(1705703220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1701590904_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x4b\x6f\xdb\x38\x10\xc7\xef\xfe\x14\xbc\x35\x09\x8c\x0d\xba\xd1\xa9\xc5\x1e\x54\x47\x4d\x85\x75\xe4\xad\x2c\xb7\xcd\x49\x60\x24\xc5\x25\xaa\xd0\xb1\xa8\x44\x49\x3f\xfd\x82\x7a\x3f\x48\x91\x7a\xb8\xd6\xc1\x97\x02\xe6\x8c\x66\x46\x9a\x3f\x7f\x9c\xb0\x97\x17\xe0\xfe\x99\x20\xec\x11\x62\x3b\x3b\xd7\x03\x17\x97\xb3\x85\xa9\xa9\x96\x06\x2c\xf5\xd3\x52\xab\x59\xcf\x66\x00\x00\x80\x5c\x80\x70\xe8\x6d\xbd\x00\x18\x2b\x0b\x18\x9b\xe5\x72\x1e\x1b\x62\x1f\xe7\x27\x0c\xa0\x13\x7a\x01\x78\x81\xc1\x1b\xc2\xdb\xc4\xe6\x7a\xc4\x09\xd0\x53\x88\x76\xb8\xe9\x32\x3b\xff\x38\xcb\xf2\xae\xb5\xaf\x1b\xcd\x58\xd4\x52\xdb\xc8\xb5\x89\xb7\x8f\x43\xa9\xeb\x2c\x7f\xfc\x73\x6d\xa9\xa6\x05\xbe\xeb\xd6\x17\xf0\x3e\x5e\xd0\x8d\x85\xa9\xdd\x6a\x86\x05\x3e\xdd\xa5\x4b\xc6\x0a\xdc\xea\xc6\x37\x75\xb9\xd1\xf2\xdf\xea\x8f\xe2\xf7\x42\x5d\x7c\xd1\xc0\xfb\x8f\xb3\x99\xba\xb4\x34\xb3\xbd\x08\xb0\xfa\x6e\x68\xd7\x34\x78\xc5\xfa\x17\x72\xf3\xe7\x93\x8f\xb7\x32\x96\x35\x1f\x90\x98\x17\xab\xe5\xe6\xd6\xa0\x1f\x72\xad\x59\xe0\x5a\xfb\xac\x6e\x96\x16\xc0\xde\x6b\xf8\x02\xfd\xb3\x77\xac\xa4\xef\x3e\x7c\x08\xbc\xad\xe3\x43\x42\xce\x85\x69\x92\xcf\x74\x7d\x0d\x16\x2b\x63\x6d\x99\xaa\x6e\x58\xb5\x37\x89\xff\x29\xf7\x64\x63\xe8\x5f\x37\x1a\x38\xa3\x86\x79\xb9\x5b\x63\x64\x7b\xfa\xe5\xbd\x81\xff\x4c\xfd\x56\x35\xef\xc0\xbf\xda\x1d\x38\x43\x2e\x8d\x7b\x79\x01\x08\xbc\x6a\x88\x8e\xae\xc9\x48\x8d\x6d\xc2\xf0\x91\xa1\xc2\xdc\x89\xa9\x35\x02\xaf\x8e\xa5\xb0\x22\x75\xa1\x2b\x02\xaf\x38\x6a\xa2\x9f\x46\x4a\x43\x45\x58\x91\x72\x08\xbc\x62\x75\x90\x06\x88\x9b\x47\xbf\xa7\x4d\x1b\x58\x95\x08\x5d\xee\x1a\xaf\x55\x07\x0a\x43\x07\xca\x1f\xd7\x81\x72\x3c\x1d\x28\x0c\x1d\x28\x5c\x1d\x28\xb2\x3a\x50\xa4\x75\xa0\xb0\xfb\xa6\xf4\xd5\x01\x37\x5e\x9b\x0e\x42\x18\x36\x8f\xa1\x64\x55\xa0\x85\x5e\x0d\xa7\x81\x8f\xd6\xf2\x52\xf2\x52\xd3\xe9\x2a\xaf\xed\xf1\x77\x90\x6b\x7c\x29\xb8\xb0\xf5\xd4\x97\xd9\xac\x38\x48\xa3\xf3\xfc\x9e\xb7\x07\x6a\xe9\xfb\xd3\x8e\x84\xcc\x09\x24\x37\x08\xba\x9f\xfb\xf1\x15\x90\x38\xfa\x3b\x07\xfa\x28\x7c\x13\x3a\x66\x5f\x90\x93\x30\x21\x6c\x66\xcc\xd6\x94\xd2\x1a\x53\x71\x59\x9d\xc7\x12\x5d\x2d\x7f\xa1\xbb\xcc\xc0\x91\x5e\xfe\x7d\xa5\xd4\x57\xcb\x22\x12\x60\xe6\xce\x92\x4e\x1e\x2a\x6b\x9c\x9d\xec\x82\x4c\x8c\x99\x7d\x9e\x77\x76\x9e\xb7\xae\x7f\x32\x9e\x54\xfb\x45\x4b\x4f\xe3\x07\x1a\xf4\xf3\xca\xd4\xf4\x1b\x23\x09\x9a\x18\xce\x81\xa9\x7d\xd6\x4c\xda\x9f\x35\xd5\xd5\xc0\x5c\x0a\x2f\x97\xd2\xcc\xa5\x0c\xcb\x95\x41\x86\x91\x2d\x6b\x41\x25\x1f\x5d\x2c\x36\xfd\x2e\xd8\x42\x8c\x08\x8c\x27\xd0\xfa\xc6\xaf\x18\xf3\xcd\xaf\x1b\x96\x76\xa3\x99\xb5\xbd\x58\xf6\xb5\xc9\xee\x39\x70\xe2\x8d\xcb\x76\x86\xf8\x37\x41\x4e\xc9\x9e\x2c\xd7\xa7\xee\xfc\xe9\x52\xfd\x15\x1f\xfa\x1e\x1c\x08\x71\x1e\xcf\xcc\x95\x27\x99\x94\xa8\xbc\xd0\x91\x48\xc1\xa8\xa1\xa0\x45\xd9\xc8\x21\x46\xa5\x81\x49\xf5\x32\xe8\x60\xa4\x15\xe1\x83\x91\xa9\x2a\xd8\x4a\x4c\xe9\xad\x5d\x7e\x4a\x18\x95\x23\xc1\x8c\x52\x6c\x73\xba\x0f\x20\x26\xe8\x77\x63\x03\x24\x3a\xfd\xb3\x7f\x74\xe7\x7b\xe3\x28\x8a\xab\x64\x2f\xb4\x96\x2c\x73\x54\x96\x7e\x25\x29\x69\x55\xe2\x8b\x44\x95\x38\xb3\xfa\x9e\x86\x91\xd6\x11\x3f\x52\xb7\x3f\xc3\x2f\x2f\x80\xf7\x08\x91\xdf\x50\x4a\xb2\x2a\x10\x4a\xe2\xb4\xf8\xa2\x9a\xea\x82\x16\xf8\x4d\x35\xef\x74\xe3\xa6\x9d\x43\xf1\x43\xc7\x92\x43\x39\x79\xa1\x86\x78\x95\x23\x86\xe4\x1d\xa5\xb4\x50\x0e\x2e\x92\x42\xec\xcb\xea\x5f\x12\x44\x5a\x08\x82\x38\xcf\x18\xed\x9f\x8b\xc1\x26\x5e\x2c\xf7\xdd\x6e\x3d\x2f\x19\x2e\x32\x8a\xe0\x1c\x55\xb1\x8d\x71\xc2\xd5\xe8\xcc\x7a\xb4\xec\x22\x3e\xe9\x9a\x65\x1f\x57\x6e\xad\xa7\x5e\xd3\xa5\x4d\x88\xd5\x66\x74\x50\x65\x8f\x23\xb0\xf9\x20\x5f\x67\xfd\x4e\xc3\xde\x19\x58\xb2\xb6\x91\x3b\xaf\x6b\x89\x31\x14\xa6\x03\xe6\x0b\x72\x5a\xc7\xc3\x92\x9b\x40\xf2\x43\xe4\x2b\x75\xcb\x90\x8e\x98\xf7\x8c\x03\x37\x35\xb9\x6e\xe0\x11\xc2\x33\x07\x9e\xb3\x0b\x5c\xdb\xf5\x1e\x9e\xb1\x13\xda\x01\x22\xbf\x9a\xcc\xce\x5c\xb7\x54\x57\x1c\xeb\xd3\xcf\x1d\xf6\x78\xc6\xc7\xdd\x3d\xf2\xb9\xd6\x87\xc0\xf3\x1c\xe8\x33\x0e\x8b\xd4\x0e\x5f\x9b\x26\xf1\x18\x9b\x37\x69\x12\x03\x6d\xbd\x1a\xf6\x68\x5b\xb8\x49\x0c\xb9\x25\x19\xf6\x1c\x77\xeb\x45\x75\x19\x7c\x1b\xd9\x5b\x86\xd5\x22\x4f\xaf\x61\xb8\x78\xbe\x43\xa6\xf8\x16\x29\x55\xbf\x9d\x68\xb7\x8e\x06\xea\x32\xcf\x76\xc8\x3c\x15\xf8\x61\xaa\xa9\x23\xb6\x56\x09\x03\x4d\xa9\xb6\x75\xe3\x5a\xfb\x91\x45\x0d\x61\x35\x6a\x18\x6c\x1f\x6d\xe4\xbe\x82\x95\xc1\xeb\xcd\x66\x4d\x87\xae\x1b\x7d\x6d\x25\xef\x0b\xb6\x88\x84\xc9\x83\xbb\x27\x72\x46\xd0\xd6\xf7\xf0\x3f\x57\x7f\x9f\xf3\x71\x88\x49\x24\x83\x43\xea\x76\xc2\xe1\xc4\x71\x88\x49\x34\x21\x1c\x16\xd5\xb4\xe2\x10\x93\x48\x1e\x87\x54\x86\x83\x70\x58\x14\xd5\x03\x87\x45\x76\x21\x16\x68\x9e\x21\x38\xc4\x24\xea\x90\xe9\xd0\x38\xec\x56\xcd\xf8\x38\xa4\x51\x05\x38\xa4\xbd\x19\x01\x87\xd0\x09\x65\x70\x48\xdd\x4e\x38\x9c\x38\x0e\xa1\x13\x4e\x08\x87\x45\x35\xad\x38\x84\x4e\x28\x8f\x43\x2a\xc3\x41\x38\x2c\x8a\xea\x81\xc3\x22\xbb\x10\x0b\x34\xcf\x10\x1c\x42\x27\xec\x90\xe9\xd0\x38\xec\x56\xcd\xf8\x38\xa4\x51\x05\x38\xa4\xbd\x19\x01\x87\x7b\xdf\x95\xc1\x21\x75\x3b\xe1\x70\xe2\x38\xdc\xfb\xee\x84\x70\x58\x54\xd3\x8a\xc3\xbd\xef\xca\xe3\x90\xca\x70\x10\x0e\x8b\xa2\x7a\xe0\xb0\xc8\x2e\xc4\x02\xcd\x33\x04\x87\x7b\xdf\xed\x90\xe9\xd0\x38\xec\x56\xcd\xf8\x38\xa4\x51\x05\x38\xa4\xbd\x19\x01\x87\x21\x24\x8f\x10\x23\x28\xc3\xc4\xdc\xf7\x04\xc6\x89\x83\x31\xeb\xd4\x84\xe8\x58\x2b\xa9\x15\x91\x99\xaf\x3c\x27\x73\x69\x0e\x82\x65\xad\xc6\x1e\xc4\xac\xd5\x21\xc4\x47\x9e\x71\x08\x3b\xb3\x20\x5d\x73\x1e\x9a\xa2\x7d\xeb\x1a\x9f\xa7\x79\x68\x01\x54\xf3\xf6\x8d\x40\x56\x22\xc5\x54\x72\xa2\xe9\xe4\x69\x4a\xa6\xc4\x51\x22\x45\x50\xd2\x81\x9d\x64\x20\x35\xc9\x00\x5e\x12\x69\x52\x92\x61\x8c\x24\xb2\x14\x22\x87\xe7\x62\x97\x5a\xc6\x67\x21\x11\x52\x90\x8c\xc2\x3f\x2c\x75\xed\x88\x4f\xb7\x8e\x93\xe7\x1f\x9e\xd2\xa5\x23\x96\xba\x73\xc4\x1d\xae\x1c\xf1\xc0\x1b\x47\x3c\xe0\xc2\x11\x4b\xdf\x37\xe2\x61\xd7\x8d\x58\xf6\x7e\x0f\x1f\xfe\xb2\xb1\x4b\x2d\x07\xf8\x9f\x17\xe1\x4d\x23\x1e\xe5\xa2\x31\x92\x9a\xff\xa2\xd3\xfc\x37\x79\xfe\x45\x53\x9a\xff\x22\xa9\xf9\x2f\xea\x30\xff\x45\x03\xe7\xbf\x68\xc0\xfc\x17\x49\xcf\x7f\xd1\xb0\xf9\x2f\x92\x9d\xb9\xa2\xc3\xcf\x7f\x5d\x6a\x19\x9f\x7f\x91\x70\xfe\x8b\xba\xcd\x7f\xff\x07\x00\x00\xff\xff\xac\xee\xe1\x3b\x26\x3f\x00\x00")

func _1701590904_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1701590904_initUpSql,
		"1701590904_init.up.sql",
	)
}

func _1701590904_initUpSql() (*asset, error) {
	bytes, err := _1701590904_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1701590904_init.up.sql", size: 16166, mode: os.FileMode(420), modTime: time.Unix(1705703216, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x31\x6b\xeb\x30\x10\xc7\x67\xdd\xa7\xd0\xf3\x10\x24\x48\xec\xe5\x4d\xef\x91\xa1\x34\x1d\x0a\x6d\x86\x94\xd0\xa1\x94\x20\x3b\x17\x45\xd4\x96\xcc\x49\x6e\x29\x25\xdf\xbd\x58\x96\x4d\x28\x1d\x92\xc9\x9c\xf9\xff\x7e\xff\xe3\xd4\xaa\xea\x4d\x69\xe4\x8d\xd1\xa4\x82\x71\xd6\x03\x98\xa6\x75\x14\xb8\x00\x96\x69\x13\x8e\x5d\x99\x57\xae\x29\xb4\xab\x95\xd5\x8b\x21\x88\xc5\xf8\x7d\xff\x9b\x01\xdb\xf1\x8b\x92\xc5\x5e\x05\x55\x2a\x8f\x45\xeb\x7c\xd0\x84\xfe\x0a\xd6\xbb\x8e\x2a\x2c\x0e\xa6\xc6\x0c\x58\x69\x6c\x2f\xbb\x8e\xd5\x6e\x97\xb8\x0c\x24\xc0\xa1\xb3\x15\x5f\xb9\xc7\x21\xb7\x2a\xc5\xbe\xdc\x6e\x1e\xb8\x0f\x64\xac\x96\x1c\x89\x1c\xf1\x2f\x60\x84\x03\xef\xf9\xbf\x25\x4f\x82\x7c\x93\x7e\x8a\x1b\xef\x31\xac\x55\x83\x5e\xc8\x39\x30\xd6\x5b\x85\x55\x0d\x4e\x22\xf1\xf2\x5a\x7e\x06\x9c\x0f\x46\xd9\x2b\x19\x23\x0c\x1d\x59\x1e\xe9\x18\x97\xc0\xd8\x49\x02\xb0\xe9\x29\x56\x2a\xa8\x08\x9d\xf7\x3e\x9b\x70\xbc\xb7\x3e\x28\x5b\xa1\x98\x36\x93\xc0\xcc\x21\x46\xff\x2c\xb9\x35\x75\xec\x48\x15\x48\x04\xec\xd4\x8b\x27\x59\x3a\x4d\xbe\xc6\x8f\xde\xf7\x14\x25\x93\x35\xd3\x6e\x31\xde\x69\xce\x7f\xac\x13\x6f\x74\x51\x5d\x4a\xf4\x75\xf9\xb6\x15\xf2\xff\x39\x30\x9b\x8d\xd3\xb8\xcb\x1d\xd1\xda\xdd\x1e\x95\xd5\xf8\xab\x2e\xcd\xd6\xd4\x70\x82\xef\x00\x00\x00\xff\xff\x85\xd7\x94\xdb\xb7\x02\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 695, mode: os.FileMode(420), modTime: time.Unix(1703630625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1701590904_init.down.sql": _1701590904_initDownSql,
	"1701590904_init.up.sql": _1701590904_initUpSql,
	"migrations.go": migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1701590904_init.down.sql": &bintree{_1701590904_initDownSql, map[string]*bintree{}},
	"1701590904_init.up.sql": &bintree{_1701590904_initUpSql, map[string]*bintree{}},
	"migrations.go": &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

