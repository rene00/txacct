// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1701590904_init.down.sql
// 1701590904_init.up.sql
// migrations.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1701590904_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x52\x48\xcc\xab\x2a\xce\x4c\x56\xd0\xd2\xe7\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x85\x09\x3a\x3b\x06\x3b\x3b\xba\xb8\x5a\x73\x71\xe9\x6b\x29\x24\x95\x16\x67\xe6\xa5\x16\x17\xc7\x27\xe7\xa7\xa4\xa2\xa9\x47\x95\x43\xd1\x56\x9c\x68\x8c\xa6\x18\x24\x82\xa6\xc4\x04\x43\x89\x09\x9a\x92\x92\xc4\x12\x74\x4b\x21\x62\x28\xca\x0a\xf2\x8b\x4b\xb0\x38\x0f\x2e\x8c\xa2\x38\x35\x37\x31\x33\x27\x3e\xbf\x28\x3d\x31\x2f\xb3\x38\xb1\x24\x33\x3f\x0f\x4d\x1b\x16\x05\x98\x06\x60\xd3\x83\xaa\x0c\xd9\x80\x78\xb0\xa3\xe3\xcb\x30\x42\x1c\x87\x22\x42\x06\xe5\x15\x97\x13\x36\x08\xa4\x08\xa7\x41\x78\xb4\x23\x69\x02\x04\x00\x00\xff\xff\xed\x8e\x15\xf6\x29\x02\x00\x00")

func _1701590904_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1701590904_initDownSql,
		"1701590904_init.down.sql",
	)
}

func _1701590904_initDownSql() (*asset, error) {
	bytes, err := _1701590904_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1701590904_init.down.sql", size: 553, mode: os.FileMode(420), modTime: time.Unix(1705203729, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1701590904_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xdf\x73\x9b\xb8\x13\xc0\xdf\xfd\x57\x68\x32\xdf\x99\x26\x19\xfb\x9b\x69\xc3\x53\x3b\xf7\x20\x63\xc5\xe1\x8a\x45\x0a\x22\xa9\xef\xe6\x86\x21\x40\x5c\xa6\x0e\x4e\x11\xf9\xd5\x9b\xfb\xdf\x6f\x84\xf8\x8d\x04\xd8\x69\xeb\x3c\x5c\x1f\x1a\xd8\x5d\xed\x2e\xda\x8f\x56\x92\x4f\x8e\xc1\xf5\x3d\x0d\xa3\x80\x52\xc7\xdb\xf8\x01\x38\x3e\x19\xa9\x26\x82\x04\x01\x02\xa7\x3a\x6a\x68\x0f\x47\x00\x00\x10\xfa\x20\x8c\x92\x60\x15\xc4\x00\x1b\x04\x60\x5b\xd7\xc7\xa9\x22\xb5\xf1\xbe\xb8\xb1\xeb\x25\x41\x0c\x1e\xdc\xf8\x39\x8c\x56\x5c\xe7\x07\xd4\x8b\xc3\xbb\x24\xdc\x44\x6d\x93\xd1\xd1\x87\x51\x1e\xd7\x42\x9f\x6c\x84\xd5\x46\x68\x27\xf4\x1d\x1a\x7c\x4b\x5d\x41\x2b\x8f\x9f\xbe\x5a\x04\x9a\x04\x5c\x69\xe4\x1c\xbc\x4d\x05\x1a\x56\x4d\xb4\x40\x98\x80\xe9\x32\x13\x61\x03\x2c\x34\x7c\x09\x75\x1b\x15\xef\xf0\x73\xf9\xae\x42\xf5\x1c\x81\xb7\x1f\x46\x23\xa8\x13\x64\x76\x27\x01\x8c\x2b\x8c\x66\xcc\x79\x4d\xfb\xff\xd0\x2f\xc6\xf3\xc9\x33\xb0\xde\xb0\x01\x5c\xad\x1a\xba\xbd\xc0\x6c\x22\x2d\x44\xc0\x0c\x9d\x41\x5b\x27\x20\x0a\x9e\x92\x07\x77\x7d\xf8\x46\x14\xf4\xcd\xfb\xf7\x71\xb0\xf2\xd6\x2e\xa5\x47\xbd\x61\xf8\x34\xcd\x66\x40\x35\xb0\x45\x4c\xa8\x61\xd2\xf8\x92\xf4\xbf\x6a\x4d\x6c\xac\x7d\xb2\x11\x38\x64\x8a\x71\xb5\x5a\x3f\x22\xda\xdd\xd7\xe0\x19\x5c\x98\xda\x02\x9a\x4b\xf0\x11\x2d\xc1\x61\xe8\x33\xbf\x27\xc7\x80\xba\xa7\x2d\xe8\x98\x6c\x08\x6a\x62\x55\xe4\xde\x0a\x28\x2c\x8c\x84\xac\x51\xf7\x74\x5f\x84\x95\xa1\x4b\xae\xa8\x7b\x2a\xa1\x89\x4d\xcd\x20\x86\x4a\xb7\x7d\xe4\x50\xf7\x54\x54\x41\xe6\x20\x2d\x1e\x9b\x4f\x87\x15\xb0\x8e\x08\x13\x6f\xeb\xaf\x93\x03\x45\xc0\x81\xf2\xcb\x39\x50\xf6\xc7\x81\x22\xe0\x40\x91\x72\xa0\x0c\xe5\x40\x19\xcc\x81\x22\xae\x9b\xb2\x2b\x07\x52\x7f\x5d\x1c\x24\x6e\xd2\xde\x86\xb8\xb4\x87\x85\x9d\x0a\xce\x1c\xef\xad\xe4\x95\xe0\x95\xa2\x33\xa9\xac\xec\xe9\x3c\x0c\x2b\x7c\xc5\x79\x6f\xe9\x99\xad\xb0\x58\xa9\x93\x56\xe5\xe5\x35\xef\x76\xd4\x51\xf7\xbb\x0d\x4d\x84\x27\x90\x42\xd1\x53\xfd\xc2\x4e\x4e\x00\x37\x5c\x6f\x3c\x77\x1d\x26\xcf\xbd\x86\xf9\x0c\x4a\x02\xf2\x0e\x9b\x2b\x73\x99\x52\x91\x09\x89\xcb\xf3\xdc\x17\x74\x8d\xf8\x25\x77\xb9\x42\x82\x5e\x31\xbf\x83\xe8\x6b\x44\xe9\x03\x30\x37\x17\xa1\x53\xb8\xca\x0b\xe7\xf0\x55\x90\xc3\x98\xeb\xc7\x45\x65\xc7\x45\xe9\x76\x0f\x26\x43\x75\x37\x6f\xd9\x6e\x7c\xc3\x9c\x9e\x19\x26\xd2\xe6\x98\x3b\xe5\x8a\x23\x60\xa2\x33\x64\xb2\xfa\x58\x8c\xab\x17\xc6\x52\x64\xb1\x94\x76\x2c\xe5\x65\xb1\xf2\x26\x23\x88\x96\x97\xa0\x16\x8f\x09\xcb\x45\xbf\x89\x57\x6e\x14\x52\x37\x3d\x81\x36\x17\x7e\x4d\x59\x2c\x7e\x0d\x13\x34\x47\x66\x63\x2d\x56\x6d\x1d\xba\xb9\x8f\xbd\x74\xe1\x8a\x8d\xdd\xe8\x3b\x0d\xbd\x8a\x9e\x8b\x9b\xa7\xee\x62\x74\x25\xff\x9a\x0d\xfb\x0e\x49\x13\x92\x0c\xcf\xd5\xb5\x91\xc2\x2e\x51\xfb\xa0\x3d\x75\x0a\x41\x0e\x65\xb7\xa8\x2a\x25\x1d\xa3\x56\x40\x9e\xfd\x90\xd6\x21\x08\xdb\xd7\x3e\x04\x91\xea\xc0\xd6\x7c\x0e\x5e\xda\xd5\x51\xbd\x5e\x25\x08\xe6\x5d\x4a\xac\xce\xd6\x81\x1b\xd1\xf0\x7b\x6b\x01\x70\x4e\x7f\xed\xa5\xbb\x58\x1b\x7b\x21\xae\x16\xbd\x64\x8d\x8b\x25\x94\x65\xb3\x34\x08\xad\x9a\xff\x3e\xa8\xb8\xb1\xa8\xee\x99\x9b\xc1\x1c\xc9\x3d\x6d\x77\x0d\x3f\x39\x06\xc1\xad\x1b\xae\x5b\xa4\x70\x69\x0f\x28\xdc\x48\x3d\x87\x26\x54\x59\x82\x97\xd0\x5c\x6a\x78\xde\xdd\x87\xd2\x41\xfb\xc2\xa1\x1a\xbc\xa4\x21\x95\x4a\x60\xe0\xdf\x38\x88\x85\xaa\xf3\x3e\x14\x52\x5b\x51\xfd\xb8\x93\xc1\x20\xf4\xf8\xb9\x8f\xc2\x6f\xf7\xe5\xc1\x26\x15\x56\xeb\xee\x74\xee\x97\x02\x93\x21\x44\x48\xb6\xaa\x54\x27\xd8\xe1\x1a\xdd\x59\x34\xb4\x6a\xd2\xbf\xd3\xb5\xd3\xde\x2f\x6e\x9d\xbb\x5e\xdb\xa4\x0b\xc4\x7a\x31\xb6\xa0\x72\x87\x2d\xb0\x3d\x50\xce\xd9\x6e\xbb\xe1\xce\x11\x44\x58\x3b\xa1\x3f\x6e\xb2\x94\xa1\x3e\x43\x53\x7b\xfe\xfe\xcf\xbf\x68\x12\x87\xd1\xea\xef\x03\xb4\x80\x9a\x3e\x79\x77\x30\x06\x07\x57\x68\x6a\x69\x04\xb1\xc7\x33\xa8\xa2\xa9\x61\x7c\x64\xcf\xe4\x4a\x23\x04\x99\xec\x51\xd7\xf0\x47\x34\xd3\x30\x7b\x46\x8b\x0b\xdd\x58\x22\x64\xb1\x17\x13\x5d\x22\x6c\xa3\xc9\xff\x16\xec\x6d\x89\xa0\x39\x41\x16\xfb\x3a\xcd\x3a\x47\x33\x26\x53\x0d\x4c\xa0\x4a\x26\x18\x2e\x50\xf5\xfd\x4c\x33\xad\xb6\xf4\x77\x63\x3a\x21\x1a\xd1\x53\x21\x9c\xe2\xec\xcf\xc4\x22\x90\xd8\x69\x44\xfe\x34\x99\x41\x9e\x30\xc2\x44\x23\xcb\x09\x59\x5e\xa0\x89\x6a\xcc\xf8\x38\xfc\x87\xa5\xa9\xc5\xab\x0e\x89\x46\xec\xec\xd9\xc0\xf3\xe2\x65\x01\x2f\xd8\x87\xb1\x47\x6d\x36\x31\xcc\xf9\xc1\x3f\xa0\xf6\xef\xf8\xa4\x75\x9e\xce\xce\xe6\x0f\xa1\xd7\x79\xb2\xae\x98\xf5\x74\x8b\x97\xac\xfc\x41\x3f\xd0\x64\xa7\xf3\x6b\xc1\x59\x25\x53\xf9\x7e\x1c\x50\x2a\x53\xc7\x81\xb7\x89\x7d\xc7\x0f\x6e\xee\x23\x2f\x71\xe2\x90\x7e\x6d\x6f\x77\xb9\xe9\x8a\x2d\x49\x89\xf6\xee\xcb\x26\x0a\x64\xca\xdb\xcd\x75\xb8\x96\x6a\x6f\xe2\x20\xf0\xdc\xb5\x60\x9f\xcd\xf4\xee\x53\x5b\xd5\x7f\x03\x28\x8a\xf4\x2a\xee\x02\xcd\x6c\xc4\xb7\x82\xd2\x6c\xc0\xfd\xa0\x82\xe1\x8e\x37\x85\x66\x52\xdb\xdc\x19\x5a\xd1\x3b\xce\xf9\x65\x9c\x9d\xee\x11\xe5\xf8\x2d\x22\xa5\x3f\xc0\x65\xf4\x3b\x9c\xdd\x66\x57\x65\x26\xe3\x7c\x85\x8c\x33\xc0\x7f\x4e\x36\xcd\xdd\xa9\x91\x89\xa0\xab\x67\x6c\x6b\x78\x86\x3e\xe7\x5e\x13\xb7\xee\x35\x89\x57\xb7\x4e\xe8\x3f\x01\x03\xcb\x6a\x63\x5b\xec\xbc\x3a\xd7\x2c\xc2\xbf\x17\xac\x42\x9a\xf0\x81\x9b\x3b\x7a\x48\xc3\xd5\x3a\x88\x7e\x3b\x7d\x77\x24\xf8\x79\x21\x73\x13\xd1\xc7\x21\xed\x90\x99\xfd\xd7\x0e\x5f\x79\x3b\x8c\xe8\xe3\x2b\x6a\x87\x65\x36\x9d\xed\x30\xa2\x8f\xc3\xdb\x21\xc3\xf0\x45\xed\xb0\x4c\x6a\x87\x76\x58\x46\xef\x6d\x0b\x2c\xce\x4b\xda\x61\x44\x1f\xb7\x88\xf4\xb3\xdb\xe1\x76\xd9\xfc\xf8\x76\xc8\xbc\xf6\xb4\x43\x56\x9b\x6d\xda\xe1\xbf\x01\x00\x00\xff\xff\x39\x45\xb4\xd8\xe9\x21\x00\x00")

func _1701590904_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1701590904_initUpSql,
		"1701590904_init.up.sql",
	)
}

func _1701590904_initUpSql() (*asset, error) {
	bytes, err := _1701590904_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1701590904_init.up.sql", size: 8681, mode: os.FileMode(420), modTime: time.Unix(1705456728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x31\x6b\xeb\x30\x10\xc7\x67\xdd\xa7\xd0\xf3\x10\x24\x48\xec\xe5\x4d\xef\x91\xa1\x34\x1d\x0a\x6d\x86\x94\xd0\xa1\x94\x20\x3b\x17\x45\xd4\x96\xcc\x49\x6e\x29\x25\xdf\xbd\x58\x96\x4d\x28\x1d\x92\xc9\x9c\xf9\xff\x7e\xff\xe3\xd4\xaa\xea\x4d\x69\xe4\x8d\xd1\xa4\x82\x71\xd6\x03\x98\xa6\x75\x14\xb8\x00\x96\x69\x13\x8e\x5d\x99\x57\xae\x29\xb4\xab\x95\xd5\x8b\x21\x88\xc5\xf8\x7d\xff\x9b\x01\xdb\xf1\x8b\x92\xc5\x5e\x05\x55\x2a\x8f\x45\xeb\x7c\xd0\x84\xfe\x0a\xd6\xbb\x8e\x2a\x2c\x0e\xa6\xc6\x0c\x58\x69\x6c\x2f\xbb\x8e\xd5\x6e\x97\xb8\x0c\x24\xc0\xa1\xb3\x15\x5f\xb9\xc7\x21\xb7\x2a\xc5\xbe\xdc\x6e\x1e\xb8\x0f\x64\xac\x96\x1c\x89\x1c\xf1\x2f\x60\x84\x03\xef\xf9\xbf\x25\x4f\x82\x7c\x93\x7e\x8a\x1b\xef\x31\xac\x55\x83\x5e\xc8\x39\x30\xd6\x5b\x85\x55\x0d\x4e\x22\xf1\xf2\x5a\x7e\x06\x9c\x0f\x46\xd9\x2b\x19\x23\x0c\x1d\x59\x1e\xe9\x18\x97\xc0\xd8\x49\x02\xb0\xe9\x29\x56\x2a\xa8\x08\x9d\xf7\x3e\x9b\x70\xbc\xb7\x3e\x28\x5b\xa1\x98\x36\x93\xc0\xcc\x21\x46\xff\x2c\xb9\x35\x75\xec\x48\x15\x48\x04\xec\xd4\x8b\x27\x59\x3a\x4d\xbe\xc6\x8f\xde\xf7\x14\x25\x93\x35\xd3\x6e\x31\xde\x69\xce\x7f\xac\x13\x6f\x74\x51\x5d\x4a\xf4\x75\xf9\xb6\x15\xf2\xff\x39\x30\x9b\x8d\xd3\xb8\xcb\x1d\xd1\xda\xdd\x1e\x95\xd5\xf8\xab\x2e\xcd\xd6\xd4\x70\x82\xef\x00\x00\x00\xff\xff\x85\xd7\x94\xdb\xb7\x02\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 695, mode: os.FileMode(420), modTime: time.Unix(1703630625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1701590904_init.down.sql": _1701590904_initDownSql,
	"1701590904_init.up.sql": _1701590904_initUpSql,
	"migrations.go": migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1701590904_init.down.sql": &bintree{_1701590904_initDownSql, map[string]*bintree{}},
	"1701590904_init.up.sql": &bintree{_1701590904_initUpSql, map[string]*bintree{}},
	"migrations.go": &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

