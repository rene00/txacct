// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1701590904_init.down.sql
// 1701590904_init.up.sql
// migrations.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1701590904_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _1701590904_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1701590904_initDownSql,
		"1701590904_init.down.sql",
	)
}

func _1701590904_initDownSql() (*asset, error) {
	bytes, err := _1701590904_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1701590904_init.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1702232558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1701590904_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x99\x5f\x93\x9a\x48\x10\xc0\xdf\xfd\x14\xfd\x16\xdd\xb2\xb2\x95\x93\xa7\xec\x13\xd1\xd9\x84\x3a\x77\xbc\x20\x5e\xb2\x4f\xd4\x88\xdc\x1e\x15\x45\x8f\xc1\xad\xdb\x7c\xfa\xab\x01\x07\x66\x9c\x3f\x80\x7a\x45\x1e\x99\x6e\xba\x7b\xbb\x7f\xdd\x3d\x8b\xf7\x77\x40\x52\x9a\xfc\x84\xbb\xfb\xc1\xd4\x47\x6e\x80\x20\x70\x3f\xcd\x11\x1c\x8e\xeb\x6d\x12\xbd\x27\xe9\x4f\x9a\x44\x30\x1c\x00\x00\x24\x1b\x48\xd2\x3c\x7e\x89\x33\xc0\x8b\x00\xf0\x6a\x3e\x1f\x17\x82\x68\xbf\x89\x21\xfa\x9b\x64\x24\xca\xe3\x0c\x5e\x49\xf6\x96\xa4\x2f\xa5\x6c\x13\xd3\x28\x4b\x0e\x79\xb2\x4f\x55\x95\xc1\xe8\x61\xc0\xfd\x2e\xd1\xd7\x15\xc2\xd3\x33\xd7\x61\xb2\x09\x69\xfc\x4f\x61\xca\x5d\x72\xff\xc5\xe3\x32\x70\xfd\x00\xbe\x79\xc1\x17\xf8\x50\x1c\x78\x78\xea\xa3\x27\x84\x03\xf8\xf4\x7c\x3a\xc2\x0b\x78\xf2\xf0\x9f\xee\x7c\x85\xaa\x67\xf7\x7b\xfd\x3c\x75\xa7\x5f\x10\x7c\x78\x18\x0c\xdc\x79\x80\x7c\x7b\x10\xb0\xf8\x86\xd1\x8c\x19\x97\xa4\xef\x93\x4d\xf5\x7e\x99\xbc\x05\x9e\x9f\xe9\x40\x29\x9e\x2e\xe6\xab\x27\xcc\x12\xb9\x44\x01\xcc\xd0\xa3\xbb\x9a\x07\x90\xc6\xff\xe6\xaf\x64\x3b\x7c\xa7\x73\xfa\xee\xe3\xc7\x2c\x7e\x89\xb6\x84\xd2\x51\xa3\x9b\x32\x4d\xb3\x19\x4c\x17\x78\x19\xf8\xae\x87\x03\x38\x59\x3b\xfc\x88\xdf\xe0\x0f\xdf\x7b\x72\xfd\x67\xf8\x1d\x3d\xc3\x30\xd9\x5c\x66\x90\x55\x3b\x14\xcb\xba\xc2\xde\xd7\x15\x82\x21\x13\x8c\xc5\x82\x33\xfb\xf7\x77\xb0\x3e\xd2\x24\x8d\x29\x0d\x0b\x4e\x0c\xa4\xc9\x4a\x7d\x00\x27\x45\xd0\x33\x77\xba\x58\x14\xfc\x24\x25\x3b\x85\x72\x76\xbb\xc0\xa8\x8b\xa4\x25\x93\xd2\xab\x3a\x92\x64\xdb\xdd\xb8\xba\x91\x53\x53\x5b\xdc\xdf\x01\x25\x13\x13\xac\x4c\xd4\x06\x51\xbd\x28\x25\x3b\x0d\xbd\x95\x92\x8d\x51\x4a\x26\x3d\x93\x59\x47\xa0\xf0\x48\xc9\xc4\x4e\x21\x4b\x5b\x17\xf6\x6a\x5f\x2d\x89\xa3\x64\xa2\x2b\x39\xb3\x53\x54\x9b\x65\x3e\x64\x15\x97\xd1\x62\xc7\x17\x9a\xb5\xf2\xe3\x98\xf9\x71\xfa\xe2\xc7\xe9\x9d\x1f\xc7\xcc\x8f\xd3\xc4\x8f\xd3\x91\x1f\xa7\x2b\x3f\x8e\xbe\xd0\xce\x95\xfc\x18\xcd\xda\xf8\xc9\x49\x6e\x5c\x97\xa5\xb0\x81\xa1\x6b\x40\x61\xf6\xfb\x46\x45\x88\x41\x85\x85\x09\x1b\x70\x29\x72\xd4\x09\x18\xc1\x63\x5b\x64\xd8\x2b\xda\xea\x16\xb6\x14\x62\x1a\x59\xb1\xdb\xb3\xf0\x72\xd8\xd3\xdc\x76\xc3\xaa\xe4\x0d\xd4\x54\x7a\x66\x72\x4a\xc5\xed\x3e\x22\xdb\x24\x7f\x6b\x54\xe4\x69\x35\x38\x2c\xc7\x3c\x17\xf2\x33\x47\x38\xb3\x91\xca\xc3\xed\x19\xd6\xb3\x30\x14\x5e\xb9\xdc\x8e\x6c\x95\xfb\x2e\xd4\x9e\xb9\x6e\x09\x2e\x7f\x4b\xc7\x5a\x65\xb1\x2a\x31\xc7\x97\x4b\xc6\x55\xf5\xaf\xf6\xd1\xf5\x3f\x93\x56\x46\x4f\x57\x87\xbf\x98\xed\xc7\x85\x8f\xbc\xcf\xb8\xb4\x5d\x0a\x46\xe0\xa3\x47\xe4\xb3\x02\x2e\x85\x2d\x7f\x1b\xcf\x8e\xc9\xb3\x63\xf4\xec\xdc\xc4\x33\x9f\x5e\x1a\xdf\x27\x91\xd6\x3b\x93\xd5\x63\x64\x9f\xbd\x90\x34\xa1\x84\x5d\xb4\x43\xba\x3f\x66\x91\x71\xa2\xe8\x54\xff\xbf\x95\xa4\xf1\xd6\x73\xcf\x9b\x23\x52\xda\x5f\xa3\x6a\x9f\x04\xba\xdc\x76\x19\x0a\xe6\xd8\x5a\xce\x07\x8d\x01\x1d\x7d\x3a\x3f\x9d\x97\xde\x15\xbe\x2c\x0b\x51\x54\x6f\x83\xf0\x95\xec\x96\x4a\x64\xad\xf9\xec\x70\x12\x6d\x36\x59\x4c\xa9\x51\xcc\x3f\xfb\xc8\x9b\xf0\xfc\x1f\xf0\x86\xad\xad\x6e\x52\x5e\x7b\xf9\x58\xcf\x87\x62\xbc\x75\x43\xfe\x42\x9d\xd8\xa2\x05\xdb\xf7\xde\xe5\x4d\x77\x71\xb7\x35\xa2\xdf\x75\x63\x76\x32\x5e\xcf\x0a\x03\x22\xbc\xa9\xab\x93\xb1\xc1\x80\x80\x8e\x87\x67\xe8\xbb\xac\x56\x74\xd3\x02\x6b\x73\xbe\x5a\x7a\xf8\x33\xac\xf3\x2c\x8e\xeb\xe1\x61\x37\x15\x8a\x0d\xd0\xd6\xec\x58\x6c\x9b\x9b\x65\xb0\xfe\x7e\xab\x2e\xe2\x4a\xa6\xdb\xc4\xa5\xf0\x96\xc5\x54\xbe\xde\xa9\x11\x9d\xab\xe8\x02\x93\x74\x6e\x19\x9f\x81\x3c\x35\x4a\x03\x61\x9a\x58\x35\x9a\xb7\x8c\x58\xbc\x6c\xab\x61\x8a\x38\x69\x62\xe3\xe2\x7a\x47\xe5\x19\x49\x29\x89\xf8\x8a\xd2\xee\x28\x51\xa7\x61\x45\xed\xe2\xdd\xfe\xc2\xeb\x95\xe0\xa5\xe7\x61\xae\x46\xa2\xcc\x72\x41\xc5\x3e\xca\xc5\xdc\x75\x99\xe4\x6a\x0c\x2d\x07\xb9\xf0\xa2\x8e\x25\xd1\xae\xe5\xea\x42\xb6\xf1\x6e\x9d\x44\xc6\x9f\xe5\x4a\x71\xf8\x1a\x67\xb4\xa6\xe2\xf4\x14\xa6\xc7\x9d\xca\xc0\x70\xf2\xdb\x48\xe6\xc0\xf8\xcb\x8f\x6c\x5c\xfb\x9b\x92\xac\x12\x1e\x7e\x44\xf2\x1f\x22\x84\x32\x7a\x18\xfc\x17\x00\x00\xff\xff\x10\x5c\x0b\x1f\x66\x1c\x00\x00")

func _1701590904_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1701590904_initUpSql,
		"1701590904_init.up.sql",
	)
}

func _1701590904_initUpSql() (*asset, error) {
	bytes, err := _1701590904_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1701590904_init.up.sql", size: 7270, mode: os.FileMode(420), modTime: time.Unix(1703146100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x31\x6b\xeb\x30\x10\xc7\x67\xdd\xa7\xd0\xf3\x10\x24\x48\xec\xe5\x4d\xef\x91\xa1\x34\x1d\x0a\x6d\x86\x94\xd0\xa1\x94\x20\x3b\x17\x45\xd4\x96\xcc\x49\x6e\x29\x25\xdf\xbd\x58\x96\x4d\x28\x1d\x92\xc9\x9c\xf9\xff\x7e\xff\xe3\xd4\xaa\xea\x4d\x69\xe4\x8d\xd1\xa4\x82\x71\xd6\x03\x98\xa6\x75\x14\xb8\x00\x96\x69\x13\x8e\x5d\x99\x57\xae\x29\xb4\xab\x95\xd5\x8b\x21\x88\xc5\xf8\x7d\xff\x9b\x01\xdb\xf1\x8b\x92\xc5\x5e\x05\x55\x2a\x8f\x45\xeb\x7c\xd0\x84\xfe\x0a\xd6\xbb\x8e\x2a\x2c\x0e\xa6\xc6\x0c\x58\x69\x6c\x2f\xbb\x8e\xd5\x6e\x97\xb8\x0c\x24\xc0\xa1\xb3\x15\x5f\xb9\xc7\x21\xb7\x2a\xc5\xbe\xdc\x6e\x1e\xb8\x0f\x64\xac\x96\x1c\x89\x1c\xf1\x2f\x60\x84\x03\xef\xf9\xbf\x25\x4f\x82\x7c\x93\x7e\x8a\x1b\xef\x31\xac\x55\x83\x5e\xc8\x39\x30\xd6\x5b\x85\x55\x0d\x4e\x22\xf1\xf2\x5a\x7e\x06\x9c\x0f\x46\xd9\x2b\x19\x23\x0c\x1d\x59\x1e\xe9\x18\x97\xc0\xd8\x49\x02\xb0\xe9\x29\x56\x2a\xa8\x08\x9d\xf7\x3e\x9b\x70\xbc\xb7\x3e\x28\x5b\xa1\x98\x36\x93\xc0\xcc\x21\x46\xff\x2c\xb9\x35\x75\xec\x48\x15\x48\x04\xec\xd4\x8b\x27\x59\x3a\x4d\xbe\xc6\x8f\xde\xf7\x14\x25\x93\x35\xd3\x6e\x31\xde\x69\xce\x7f\xac\x13\x6f\x74\x51\x5d\x4a\xf4\x75\xf9\xb6\x15\xf2\xff\x39\x30\x9b\x8d\xd3\xb8\xcb\x1d\xd1\xda\xdd\x1e\x95\xd5\xf8\xab\x2e\xcd\xd6\xd4\x70\x82\xef\x00\x00\x00\xff\xff\x85\xd7\x94\xdb\xb7\x02\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 695, mode: os.FileMode(420), modTime: time.Unix(1702232558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1701590904_init.down.sql": _1701590904_initDownSql,
	"1701590904_init.up.sql": _1701590904_initUpSql,
	"migrations.go": migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1701590904_init.down.sql": &bintree{_1701590904_initDownSql, map[string]*bintree{}},
	"1701590904_init.up.sql": &bintree{_1701590904_initUpSql, map[string]*bintree{}},
	"migrations.go": &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

