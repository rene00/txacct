// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1701590904_init.down.sql
// 1701590904_init.up.sql
// migrations.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1701590904_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x31\x0f\x82\x30\x10\x85\x77\x7e\x45\x67\x16\x06\xd9\x9c\x10\xd8\x4c\x34\xea\xde\x9c\x40\x4c\x13\xb8\xaa\x57\x25\xf1\xd7\x9b\x6a\x44\x5b\x90\xeb\xfa\xf8\xde\xc7\xeb\x25\xb1\x00\x7c\x90\xaa\x44\x9c\x44\xc5\x6e\xb3\x15\x87\x6c\xb5\x2e\x3f\x61\x9e\xed\xf3\xac\x28\x97\x51\x94\xc4\xe2\x78\x23\x85\x0d\x91\xac\x74\xdd\x78\xbc\xfb\xcd\xa9\x11\x2c\x3c\xd8\x26\x1e\x92\x8e\x90\xd4\x43\x0c\x18\xff\xa7\xef\xcc\xc1\xce\x9a\xcc\xc4\xbc\x21\x76\xe0\xa6\x03\xd5\x4a\x7d\x3d\x01\x2a\x02\xa3\x34\x7a\xb5\x09\x60\x2c\x98\xea\xb8\xd8\xaf\x40\xbe\x46\xcb\xfb\xe8\xe2\x7f\x20\x4e\x84\xd4\xf3\x22\x0b\x71\x22\xa8\x0c\x2f\xb2\x10\x27\xba\xb4\x35\x2f\xb2\x10\x27\x32\x40\x1d\xa0\x02\xde\x36\x90\xec\xb5\x02\xde\x88\xfc\x13\x29\x60\x13\xf1\x6b\xfa\x00\x4d\x3f\xa3\x99\x69\x7f\x4b\xcf\x00\x00\x00\xff\xff\x8a\x94\x01\x92\xe2\x03\x00\x00")

func _1701590904_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1701590904_initDownSql,
		"1701590904_init.down.sql",
	)
}

func _1701590904_initDownSql() (*asset, error) {
	bytes, err := _1701590904_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1701590904_init.down.sql", size: 994, mode: os.FileMode(420), modTime: time.Unix(1706439424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1701590904_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x4b\x6f\xdb\x38\x10\xc7\xef\xfe\x14\xbc\xd5\x09\x8c\x0d\xba\xd1\xa9\xc5\x1e\x54\x47\x49\x8c\x75\xe4\xad\x2c\xb7\xcd\x49\x60\x24\xc5\x25\xaa\xd0\xb1\xa8\x44\x49\x3f\xfd\x82\x7a\x3f\x48\x91\x7a\xb8\xd6\xc1\x97\x02\xe1\x8c\x66\xc6\x9c\xbf\x7e\x1c\xb1\x17\xe7\xe0\xe1\x85\x20\xec\x12\x62\xd9\x3b\xc7\x05\xe7\x17\x93\xb9\xa1\xa9\xa6\x06\x4c\xf5\xcb\x52\xab\x58\xa7\x13\x00\x00\x40\x0e\x40\x38\x70\xb7\xae\x0f\xf4\x95\x09\xf4\xcd\x72\x39\x8b\x0c\x91\x8f\xfd\x13\xfa\xd0\x0e\x5c\x1f\xbc\x42\xff\x1d\xe1\x6d\x6c\x73\x5c\x62\xfb\xe8\x39\x40\x3b\x5c\x77\x99\x9c\x7d\x9e\xa4\x79\xd7\xda\xd7\x8d\xa6\xcf\x2b\xa9\x2d\xe4\x58\xc4\xdd\x47\xa1\xd4\x75\x9a\x3f\xfa\x73\x6d\xaa\x86\x09\xbe\x2f\xcc\x5b\xf0\x31\x5a\x58\xe8\x73\x43\xbb\xd3\x74\x13\x7c\xb9\x4f\x96\xf4\x15\xb8\x5b\xe8\xdf\xd4\xe5\x46\xcb\xfe\x56\x7f\xe4\x7f\xcf\xd5\xf9\xad\x06\x3e\x7e\x9e\x4c\xd4\xa5\xa9\x19\xcd\x45\x80\xd5\x77\x5d\xbb\xa2\xc1\x4b\xd6\xbf\x90\x93\x3d\x1f\x6f\xde\x4a\x5f\x56\x7c\x40\x6c\x9e\xaf\x96\x9b\x3b\x9d\x6e\xe4\x5a\x33\xc1\x95\x76\xad\x6e\x96\x26\xc0\xee\x5b\xf0\x0a\xbd\xe9\x07\x56\xd2\x0f\x9f\x3e\xf9\xee\xd6\xf6\x20\x21\x67\xc2\x34\xf1\x36\x5d\x5d\x81\xf9\x4a\x5f\x9b\x86\xba\xd0\xcd\xca\x2f\x89\xfe\x29\xf6\x64\xa3\x2f\xbe\x6e\x34\x30\xa5\x86\x59\xb1\x5b\x43\x64\x7b\xfe\xe5\xbe\x83\xff\x8c\xc5\x9d\x6a\xdc\x83\x7f\xb5\x7b\x30\x45\x0e\x8d\x7b\x71\x0e\x08\xbc\xac\x89\x8e\xae\xc9\x48\x8d\x6d\xc2\xf0\x89\xa1\xc2\xcc\x89\xa9\x35\x02\x2f\x8f\xa5\xb0\x3c\x75\xae\x2b\x02\x2f\x39\x6a\xa2\x5b\x23\xa5\xa1\x3c\xac\x48\x39\x04\x5e\xb2\x3a\x48\x03\x44\xcd\xa3\xfb\x69\xd1\x06\x96\x25\x42\x97\xdb\xc6\x6b\xd4\x81\xc2\xd0\x81\xf2\xc7\x75\xa0\x1c\x4f\x07\x0a\x43\x07\x0a\x57\x07\x8a\xac\x0e\x14\x69\x1d\x28\xec\xbe\x29\x5d\x75\xc0\x8d\xd7\xa4\x83\x00\x06\xf5\x63\x28\x5e\x15\x68\xa1\x53\xc3\x69\xe0\xa3\xb5\xbc\x90\xbc\xd0\x74\xba\xca\x6b\x7b\xb4\x0f\x72\x8d\x2f\x04\x17\xb6\x9e\xfa\x32\x9b\x15\x05\xa9\x75\x9e\xdf\xf3\xe6\x40\x0d\x7d\x7f\xde\x91\x80\x39\x81\x64\x06\x41\xf7\x33\x3f\xbe\x02\x62\x47\x6f\x67\x43\x0f\x05\xef\x42\xc7\x74\x07\x39\x09\x63\xc2\xa6\xc6\x74\x4d\x29\xac\x31\x15\x97\xd6\x79\x2c\xd1\x55\xf2\xe7\xba\x4b\x0d\x1c\xe9\x65\xfb\x2b\xa5\xbe\x4a\x16\x91\x00\x53\x77\x96\x74\xb2\x50\x69\xe3\xac\xf8\x2d\x48\xc5\x98\xda\x67\x59\x67\x67\x59\xeb\xba\x27\xe3\x49\xb5\x5b\xb4\xe4\x34\x7e\xa4\x41\xaf\x57\x86\xb6\xb8\xd1\xe3\xa0\xb1\xe1\x0c\x18\xda\xb5\x66\xd0\xfe\xac\xa9\xae\x7a\xe6\x52\x78\xb9\x94\x7a\x2e\xa5\x5f\xae\x14\x32\x8c\x6c\x69\x0b\x4a\xf9\xe8\x62\x92\x31\x79\x31\x16\xfa\x95\xf6\x83\xd1\xe4\xc0\xdf\x3e\x59\xc8\x79\x03\x2b\x3d\xd7\xde\x66\xbd\xd0\x6f\xc0\xcd\x62\x6d\x82\x69\xf6\x1e\x6f\x11\x09\x62\xf7\xdd\x33\x99\x12\xb4\xf5\x5c\xfc\xcf\xe5\xdf\x67\x09\x59\x76\xfe\x16\x62\x44\x60\x34\xe6\x56\xe9\x52\x32\x66\x84\x59\xe8\xa6\x76\xa3\x19\x95\x17\xbe\xe8\x6b\x91\xdd\x8b\x6f\x47\x74\x60\x3b\x43\xfc\x9b\x20\xbb\x60\x8f\x97\xab\xa3\x7d\xf6\x74\x61\x93\x4a\x3e\x74\xb3\x38\xa4\xe3\x3c\x9e\x9a\x4b\x4f\x32\x51\x54\xfa\x41\x47\xc2\x11\xa3\x86\x1c\x49\x45\x23\x07\x4b\xa5\x06\xc6\xd5\xcb\xf0\x89\x91\x56\xc4\x28\x46\xa6\xf2\x5b\x51\x8a\x29\xcd\x8f\xe2\x53\xc2\xa8\x1c\x09\xa6\x28\x64\x9b\x93\xf7\x00\x62\x82\x7e\xd7\x5e\x80\x58\xa7\x7f\xf6\xcb\x3e\x7b\x37\x8e\xa2\xb8\x52\xf6\x5c\x6b\xf1\x32\x47\x65\xc9\x2e\x49\x49\xab\x14\x5f\x24\xaa\xd8\x99\xd5\xf7\x24\x8c\xb4\x8e\xf8\x91\xda\x7d\xeb\x5f\x9c\x03\xf7\x09\x22\xaf\xa6\x94\x78\x55\x20\x94\xd8\x69\x7e\xab\x1a\xea\x9c\x16\xf8\x4d\x35\xee\x29\xb2\x1b\x39\x14\x3d\x74\x2c\x39\x14\x93\xe7\x6a\x88\x56\x39\x62\x88\x7f\xa3\x94\x16\x8a\xc1\x45\x52\x88\x7c\x59\xfd\x8b\x83\x48\x0b\x41\x10\xe7\x05\xa3\xfd\x4b\x3e\x3d\x45\x8b\xc5\xbe\x5b\x8d\xe7\x25\xc3\x45\x46\x11\x9c\xa3\x2a\xb2\x31\x4e\xb8\x0a\x9d\x59\x8f\x16\x5d\xc4\x27\x5d\xbd\xec\xe3\xca\xad\xf1\xd4\xab\xbb\x34\x09\xb1\xdc\x8c\x16\xaa\xec\x70\x04\xd6\x1f\xe4\xeb\xac\xdb\x69\xd8\x39\x03\x4b\xd6\x16\x72\x66\x55\x2d\x31\x86\xc2\x64\x8a\x7d\x45\x76\xe3\x78\x58\x70\x13\x48\xbe\x8f\x7c\xa5\xae\x32\x92\x11\xf3\x81\x71\xe0\x26\x26\xc7\xf1\x5d\x42\x78\x66\xdf\xb5\x77\xbe\x63\x39\xee\xe3\x0b\xb6\x03\xcb\x47\xe4\x57\x9d\xd9\xa9\xeb\x96\xea\x8a\x63\x7d\xfe\xb9\xc3\x2e\xcf\xf8\xb4\x7b\x40\x1e\xd7\xfa\xe8\xbb\xae\x0d\x3d\xc6\x61\x91\xd8\xe1\x5b\xdd\x24\x1e\x63\xb3\x26\x8d\x62\xa0\xad\x56\xc3\x1e\x6d\x73\x37\x89\x21\xb7\x20\xc3\x8e\xe3\x6e\xb5\xa8\x36\x83\x6f\x2d\x7b\xc3\xb0\x9a\xe7\xe9\x34\x0c\xe7\xcf\xb7\xc8\x14\x5d\x55\x25\xea\xb7\x62\xed\x56\xd1\x40\x5d\x66\xe9\x1b\x32\x4b\x04\x7e\x98\x6a\xaa\x88\xad\x54\xc2\x40\x53\xe9\xa3\x38\xb1\x07\xb0\x1c\xb5\xf8\x65\xcc\xe9\x4d\xf1\x3b\x39\x62\x49\x8b\x6f\xe4\x24\x0c\x26\xa1\x0c\x0e\xa9\xdb\x09\x87\x23\xc7\x21\x26\xe1\x88\x70\x98\x57\xd3\x88\x43\x4c\x42\x79\x1c\x52\x19\xf6\xc2\x61\x5e\x54\x07\x1c\xe6\xd9\x85\x58\xa0\x79\xfa\xe0\x10\x93\xb0\x45\xa6\x43\xe3\xb0\x5d\x35\xc3\xe3\x90\x46\x15\xe0\x90\xf6\x66\x00\x1c\x42\x3b\x90\xc1\x21\x75\x3b\xe1\x70\xe4\x38\x84\x76\x30\x22\x1c\xe6\xd5\x34\xe2\x10\xda\x81\x3c\x0e\xa9\x0c\x7b\xe1\x30\x2f\xaa\x03\x0e\xf3\xec\x42\x2c\xd0\x3c\x7d\x70\x08\xed\xa0\x45\xa6\x43\xe3\xb0\x5d\x35\xc3\xe3\x90\x46\x15\xe0\x90\xf6\x66\x00\x1c\xee\x3d\x47\x06\x87\xd4\xed\x84\xc3\x91\xe3\x70\xef\x39\x23\xc2\x61\x5e\x4d\x23\x0e\xf7\x9e\x23\x8f\x43\x2a\xc3\x5e\x38\xcc\x8b\xea\x80\xc3\x3c\xbb\x10\x0b\x34\x4f\x1f\x1c\xee\x3d\xa7\x45\xa6\x43\xe3\xb0\x5d\x35\xc3\xe3\x90\x46\x15\xe0\x90\xf6\x66\x00\x1c\x06\x90\x3c\x41\x8c\xa0\x0c\x13\x33\xdf\x13\x18\x47\x0e\xc6\xb4\x53\x23\xa2\x63\xa5\xa4\x46\x44\xa6\xbe\xf2\x9c\xcc\xa4\xd9\x0b\x96\x95\x1a\x3b\x10\xb3\x52\x87\x10\x1f\x59\xc6\x3e\xec\x4c\x83\xb4\xcd\x79\x68\x8a\x76\xad\x6b\x78\x9e\x66\xa1\x05\x50\xcd\xda\x37\x00\x59\x89\x14\x53\xc9\x89\xa6\xa3\xa7\x29\x19\x13\x47\x89\x14\x41\x49\x0b\x76\x92\x9e\xd4\x24\x3d\x78\x49\xa4\x49\x49\xfa\x31\x92\xc8\x52\x88\x1c\x9e\x8b\x6d\x6a\x19\x9e\x85\x44\x48\x41\x32\x08\xff\xb0\xd4\xb5\x23\x3e\xdd\x3a\x8e\x9e\x7f\x78\x4c\x97\x8e\x58\xea\xce\x11\xb7\xb8\x72\xc4\x3d\x6f\x1c\x71\x8f\x0b\x47\x2c\x7d\xdf\x88\xfb\x5d\x37\x62\xd9\xfb\x3d\x7c\xf8\xcb\xc6\x36\xb5\x1c\xe0\x7f\x5e\x84\x37\x8d\x78\x90\x8b\xc6\x50\x6a\xfe\x0b\x4f\xf3\xdf\xe8\xf9\x17\x8e\x69\xfe\x0b\xa5\xe6\xbf\xb0\xc5\xfc\x17\xf6\x9c\xff\xc2\x1e\xf3\x5f\x28\x3d\xff\x85\xfd\xe6\xbf\x50\x76\xe6\x0a\x0f\x3f\xff\xb5\xa9\x65\x78\xfe\x85\xc2\xf9\x2f\x6c\x37\xff\xfd\x1f\x00\x00\xff\xff\x60\xd1\xf9\xb4\x8b\x3f\x00\x00")

func _1701590904_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1701590904_initUpSql,
		"1701590904_init.up.sql",
	)
}

func _1701590904_initUpSql() (*asset, error) {
	bytes, err := _1701590904_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1701590904_init.up.sql", size: 16267, mode: os.FileMode(420), modTime: time.Unix(1706557931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x31\x6b\xeb\x30\x10\xc7\x67\xdd\xa7\xd0\xf3\x10\x24\x48\xec\xe5\x4d\xef\x91\xa1\x34\x1d\x0a\x6d\x86\x94\xd0\xa1\x94\x20\x3b\x17\x45\xd4\x96\xcc\x49\x6e\x29\x25\xdf\xbd\x58\x96\x4d\x28\x1d\x92\xc9\x9c\xf9\xff\x7e\xff\xe3\xd4\xaa\xea\x4d\x69\xe4\x8d\xd1\xa4\x82\x71\xd6\x03\x98\xa6\x75\x14\xb8\x00\x96\x69\x13\x8e\x5d\x99\x57\xae\x29\xb4\xab\x95\xd5\x8b\x21\x88\xc5\xf8\x7d\xff\x9b\x01\xdb\xf1\x8b\x92\xc5\x5e\x05\x55\x2a\x8f\x45\xeb\x7c\xd0\x84\xfe\x0a\xd6\xbb\x8e\x2a\x2c\x0e\xa6\xc6\x0c\x58\x69\x6c\x2f\xbb\x8e\xd5\x6e\x97\xb8\x0c\x24\xc0\xa1\xb3\x15\x5f\xb9\xc7\x21\xb7\x2a\xc5\xbe\xdc\x6e\x1e\xb8\x0f\x64\xac\x96\x1c\x89\x1c\xf1\x2f\x60\x84\x03\xef\xf9\xbf\x25\x4f\x82\x7c\x93\x7e\x8a\x1b\xef\x31\xac\x55\x83\x5e\xc8\x39\x30\xd6\x5b\x85\x55\x0d\x4e\x22\xf1\xf2\x5a\x7e\x06\x9c\x0f\x46\xd9\x2b\x19\x23\x0c\x1d\x59\x1e\xe9\x18\x97\xc0\xd8\x49\x02\xb0\xe9\x29\x56\x2a\xa8\x08\x9d\xf7\x3e\x9b\x70\xbc\xb7\x3e\x28\x5b\xa1\x98\x36\x93\xc0\xcc\x21\x46\xff\x2c\xb9\x35\x75\xec\x48\x15\x48\x04\xec\xd4\x8b\x27\x59\x3a\x4d\xbe\xc6\x8f\xde\xf7\x14\x25\x93\x35\xd3\x6e\x31\xde\x69\xce\x7f\xac\x13\x6f\x74\x51\x5d\x4a\xf4\x75\xf9\xb6\x15\xf2\xff\x39\x30\x9b\x8d\xd3\xb8\xcb\x1d\xd1\xda\xdd\x1e\x95\xd5\xf8\xab\x2e\xcd\xd6\xd4\x70\x82\xef\x00\x00\x00\xff\xff\x85\xd7\x94\xdb\xb7\x02\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 695, mode: os.FileMode(420), modTime: time.Unix(1703630625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1701590904_init.down.sql": _1701590904_initDownSql,
	"1701590904_init.up.sql": _1701590904_initUpSql,
	"migrations.go": migrationsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1701590904_init.down.sql": &bintree{_1701590904_initDownSql, map[string]*bintree{}},
	"1701590904_init.up.sql": &bintree{_1701590904_initUpSql, map[string]*bintree{}},
	"migrations.go": &bintree{migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

