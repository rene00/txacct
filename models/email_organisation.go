// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EmailOrganisation is an object representing the database table.
type EmailOrganisation struct {
	ID             int `boil:"id" json:"id" toml:"id" yaml:"id"`
	EmailID        int `boil:"email_id" json:"email_id" toml:"email_id" yaml:"email_id"`
	OrganisationID int `boil:"organisation_id" json:"organisation_id" toml:"organisation_id" yaml:"organisation_id"`

	R *emailOrganisationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L emailOrganisationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmailOrganisationColumns = struct {
	ID             string
	EmailID        string
	OrganisationID string
}{
	ID:             "id",
	EmailID:        "email_id",
	OrganisationID: "organisation_id",
}

var EmailOrganisationTableColumns = struct {
	ID             string
	EmailID        string
	OrganisationID string
}{
	ID:             "email_organisation.id",
	EmailID:        "email_organisation.email_id",
	OrganisationID: "email_organisation.organisation_id",
}

// Generated where

var EmailOrganisationWhere = struct {
	ID             whereHelperint
	EmailID        whereHelperint
	OrganisationID whereHelperint
}{
	ID:             whereHelperint{field: "\"email_organisation\".\"id\""},
	EmailID:        whereHelperint{field: "\"email_organisation\".\"email_id\""},
	OrganisationID: whereHelperint{field: "\"email_organisation\".\"organisation_id\""},
}

// EmailOrganisationRels is where relationship names are stored.
var EmailOrganisationRels = struct {
	Email        string
	Organisation string
}{
	Email:        "Email",
	Organisation: "Organisation",
}

// emailOrganisationR is where relationships are stored.
type emailOrganisationR struct {
	Email        *Email        `boil:"Email" json:"Email" toml:"Email" yaml:"Email"`
	Organisation *Organisation `boil:"Organisation" json:"Organisation" toml:"Organisation" yaml:"Organisation"`
}

// NewStruct creates a new relationship struct
func (*emailOrganisationR) NewStruct() *emailOrganisationR {
	return &emailOrganisationR{}
}

func (r *emailOrganisationR) GetEmail() *Email {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *emailOrganisationR) GetOrganisation() *Organisation {
	if r == nil {
		return nil
	}
	return r.Organisation
}

// emailOrganisationL is where Load methods for each relationship are stored.
type emailOrganisationL struct{}

var (
	emailOrganisationAllColumns            = []string{"id", "email_id", "organisation_id"}
	emailOrganisationColumnsWithoutDefault = []string{"email_id", "organisation_id"}
	emailOrganisationColumnsWithDefault    = []string{"id"}
	emailOrganisationPrimaryKeyColumns     = []string{"id"}
	emailOrganisationGeneratedColumns      = []string{}
)

type (
	// EmailOrganisationSlice is an alias for a slice of pointers to EmailOrganisation.
	// This should almost always be used instead of []EmailOrganisation.
	EmailOrganisationSlice []*EmailOrganisation
	// EmailOrganisationHook is the signature for custom EmailOrganisation hook methods
	EmailOrganisationHook func(context.Context, boil.ContextExecutor, *EmailOrganisation) error

	emailOrganisationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	emailOrganisationType                 = reflect.TypeOf(&EmailOrganisation{})
	emailOrganisationMapping              = queries.MakeStructMapping(emailOrganisationType)
	emailOrganisationPrimaryKeyMapping, _ = queries.BindMapping(emailOrganisationType, emailOrganisationMapping, emailOrganisationPrimaryKeyColumns)
	emailOrganisationInsertCacheMut       sync.RWMutex
	emailOrganisationInsertCache          = make(map[string]insertCache)
	emailOrganisationUpdateCacheMut       sync.RWMutex
	emailOrganisationUpdateCache          = make(map[string]updateCache)
	emailOrganisationUpsertCacheMut       sync.RWMutex
	emailOrganisationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var emailOrganisationAfterSelectHooks []EmailOrganisationHook

var emailOrganisationBeforeInsertHooks []EmailOrganisationHook
var emailOrganisationAfterInsertHooks []EmailOrganisationHook

var emailOrganisationBeforeUpdateHooks []EmailOrganisationHook
var emailOrganisationAfterUpdateHooks []EmailOrganisationHook

var emailOrganisationBeforeDeleteHooks []EmailOrganisationHook
var emailOrganisationAfterDeleteHooks []EmailOrganisationHook

var emailOrganisationBeforeUpsertHooks []EmailOrganisationHook
var emailOrganisationAfterUpsertHooks []EmailOrganisationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EmailOrganisation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailOrganisationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EmailOrganisation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailOrganisationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EmailOrganisation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailOrganisationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EmailOrganisation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailOrganisationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EmailOrganisation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailOrganisationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EmailOrganisation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailOrganisationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EmailOrganisation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailOrganisationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EmailOrganisation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailOrganisationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EmailOrganisation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailOrganisationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmailOrganisationHook registers your hook function for all future operations.
func AddEmailOrganisationHook(hookPoint boil.HookPoint, emailOrganisationHook EmailOrganisationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		emailOrganisationAfterSelectHooks = append(emailOrganisationAfterSelectHooks, emailOrganisationHook)
	case boil.BeforeInsertHook:
		emailOrganisationBeforeInsertHooks = append(emailOrganisationBeforeInsertHooks, emailOrganisationHook)
	case boil.AfterInsertHook:
		emailOrganisationAfterInsertHooks = append(emailOrganisationAfterInsertHooks, emailOrganisationHook)
	case boil.BeforeUpdateHook:
		emailOrganisationBeforeUpdateHooks = append(emailOrganisationBeforeUpdateHooks, emailOrganisationHook)
	case boil.AfterUpdateHook:
		emailOrganisationAfterUpdateHooks = append(emailOrganisationAfterUpdateHooks, emailOrganisationHook)
	case boil.BeforeDeleteHook:
		emailOrganisationBeforeDeleteHooks = append(emailOrganisationBeforeDeleteHooks, emailOrganisationHook)
	case boil.AfterDeleteHook:
		emailOrganisationAfterDeleteHooks = append(emailOrganisationAfterDeleteHooks, emailOrganisationHook)
	case boil.BeforeUpsertHook:
		emailOrganisationBeforeUpsertHooks = append(emailOrganisationBeforeUpsertHooks, emailOrganisationHook)
	case boil.AfterUpsertHook:
		emailOrganisationAfterUpsertHooks = append(emailOrganisationAfterUpsertHooks, emailOrganisationHook)
	}
}

// One returns a single emailOrganisation record from the query.
func (q emailOrganisationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EmailOrganisation, error) {
	o := &EmailOrganisation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for email_organisation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EmailOrganisation records from the query.
func (q emailOrganisationQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmailOrganisationSlice, error) {
	var o []*EmailOrganisation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EmailOrganisation slice")
	}

	if len(emailOrganisationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EmailOrganisation records in the query.
func (q emailOrganisationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count email_organisation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q emailOrganisationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if email_organisation exists")
	}

	return count > 0, nil
}

// Email pointed to by the foreign key.
func (o *EmailOrganisation) Email(mods ...qm.QueryMod) emailQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EmailID),
	}

	queryMods = append(queryMods, mods...)

	return Emails(queryMods...)
}

// Organisation pointed to by the foreign key.
func (o *EmailOrganisation) Organisation(mods ...qm.QueryMod) organisationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganisationID),
	}

	queryMods = append(queryMods, mods...)

	return Organisations(queryMods...)
}

// LoadEmail allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (emailOrganisationL) LoadEmail(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmailOrganisation interface{}, mods queries.Applicator) error {
	var slice []*EmailOrganisation
	var object *EmailOrganisation

	if singular {
		var ok bool
		object, ok = maybeEmailOrganisation.(*EmailOrganisation)
		if !ok {
			object = new(EmailOrganisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmailOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmailOrganisation))
			}
		}
	} else {
		s, ok := maybeEmailOrganisation.(*[]*EmailOrganisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmailOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmailOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &emailOrganisationR{}
		}
		args = append(args, object.EmailID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &emailOrganisationR{}
			}

			for _, a := range args {
				if a == obj.EmailID {
					continue Outer
				}
			}

			args = append(args, obj.EmailID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`email`),
		qm.WhereIn(`email.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Email")
	}

	var resultSlice []*Email
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Email")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for email")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for email")
	}

	if len(emailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Email = foreign
		if foreign.R == nil {
			foreign.R = &emailR{}
		}
		foreign.R.EmailOrganisations = append(foreign.R.EmailOrganisations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EmailID == foreign.ID {
				local.R.Email = foreign
				if foreign.R == nil {
					foreign.R = &emailR{}
				}
				foreign.R.EmailOrganisations = append(foreign.R.EmailOrganisations, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganisation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (emailOrganisationL) LoadOrganisation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmailOrganisation interface{}, mods queries.Applicator) error {
	var slice []*EmailOrganisation
	var object *EmailOrganisation

	if singular {
		var ok bool
		object, ok = maybeEmailOrganisation.(*EmailOrganisation)
		if !ok {
			object = new(EmailOrganisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmailOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmailOrganisation))
			}
		}
	} else {
		s, ok := maybeEmailOrganisation.(*[]*EmailOrganisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmailOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmailOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &emailOrganisationR{}
		}
		args = append(args, object.OrganisationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &emailOrganisationR{}
			}

			for _, a := range args {
				if a == obj.OrganisationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganisationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation`),
		qm.WhereIn(`organisation.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organisation")
	}

	var resultSlice []*Organisation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organisation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organisation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation")
	}

	if len(organisationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organisation = foreign
		if foreign.R == nil {
			foreign.R = &organisationR{}
		}
		foreign.R.EmailOrganisations = append(foreign.R.EmailOrganisations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganisationID == foreign.ID {
				local.R.Organisation = foreign
				if foreign.R == nil {
					foreign.R = &organisationR{}
				}
				foreign.R.EmailOrganisations = append(foreign.R.EmailOrganisations, local)
				break
			}
		}
	}

	return nil
}

// SetEmail of the emailOrganisation to the related item.
// Sets o.R.Email to related.
// Adds o to related.R.EmailOrganisations.
func (o *EmailOrganisation) SetEmail(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Email) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"email_organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"email_id"}),
		strmangle.WhereClause("\"", "\"", 2, emailOrganisationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EmailID = related.ID
	if o.R == nil {
		o.R = &emailOrganisationR{
			Email: related,
		}
	} else {
		o.R.Email = related
	}

	if related.R == nil {
		related.R = &emailR{
			EmailOrganisations: EmailOrganisationSlice{o},
		}
	} else {
		related.R.EmailOrganisations = append(related.R.EmailOrganisations, o)
	}

	return nil
}

// SetOrganisation of the emailOrganisation to the related item.
// Sets o.R.Organisation to related.
// Adds o to related.R.EmailOrganisations.
func (o *EmailOrganisation) SetOrganisation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organisation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"email_organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_id"}),
		strmangle.WhereClause("\"", "\"", 2, emailOrganisationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganisationID = related.ID
	if o.R == nil {
		o.R = &emailOrganisationR{
			Organisation: related,
		}
	} else {
		o.R.Organisation = related
	}

	if related.R == nil {
		related.R = &organisationR{
			EmailOrganisations: EmailOrganisationSlice{o},
		}
	} else {
		related.R.EmailOrganisations = append(related.R.EmailOrganisations, o)
	}

	return nil
}

// EmailOrganisations retrieves all the records using an executor.
func EmailOrganisations(mods ...qm.QueryMod) emailOrganisationQuery {
	mods = append(mods, qm.From("\"email_organisation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"email_organisation\".*"})
	}

	return emailOrganisationQuery{q}
}

// FindEmailOrganisation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmailOrganisation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EmailOrganisation, error) {
	emailOrganisationObj := &EmailOrganisation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"email_organisation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, emailOrganisationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from email_organisation")
	}

	if err = emailOrganisationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return emailOrganisationObj, err
	}

	return emailOrganisationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EmailOrganisation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no email_organisation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(emailOrganisationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	emailOrganisationInsertCacheMut.RLock()
	cache, cached := emailOrganisationInsertCache[key]
	emailOrganisationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			emailOrganisationAllColumns,
			emailOrganisationColumnsWithDefault,
			emailOrganisationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(emailOrganisationType, emailOrganisationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(emailOrganisationType, emailOrganisationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"email_organisation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"email_organisation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into email_organisation")
	}

	if !cached {
		emailOrganisationInsertCacheMut.Lock()
		emailOrganisationInsertCache[key] = cache
		emailOrganisationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EmailOrganisation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EmailOrganisation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	emailOrganisationUpdateCacheMut.RLock()
	cache, cached := emailOrganisationUpdateCache[key]
	emailOrganisationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			emailOrganisationAllColumns,
			emailOrganisationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update email_organisation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"email_organisation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, emailOrganisationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(emailOrganisationType, emailOrganisationMapping, append(wl, emailOrganisationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update email_organisation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for email_organisation")
	}

	if !cached {
		emailOrganisationUpdateCacheMut.Lock()
		emailOrganisationUpdateCache[key] = cache
		emailOrganisationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q emailOrganisationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for email_organisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for email_organisation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmailOrganisationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailOrganisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"email_organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, emailOrganisationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in emailOrganisation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all emailOrganisation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EmailOrganisation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no email_organisation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(emailOrganisationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	emailOrganisationUpsertCacheMut.RLock()
	cache, cached := emailOrganisationUpsertCache[key]
	emailOrganisationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			emailOrganisationAllColumns,
			emailOrganisationColumnsWithDefault,
			emailOrganisationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			emailOrganisationAllColumns,
			emailOrganisationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert email_organisation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(emailOrganisationPrimaryKeyColumns))
			copy(conflict, emailOrganisationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"email_organisation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(emailOrganisationType, emailOrganisationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(emailOrganisationType, emailOrganisationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert email_organisation")
	}

	if !cached {
		emailOrganisationUpsertCacheMut.Lock()
		emailOrganisationUpsertCache[key] = cache
		emailOrganisationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EmailOrganisation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EmailOrganisation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EmailOrganisation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), emailOrganisationPrimaryKeyMapping)
	sql := "DELETE FROM \"email_organisation\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from email_organisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for email_organisation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q emailOrganisationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no emailOrganisationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from email_organisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for email_organisation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmailOrganisationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(emailOrganisationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailOrganisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"email_organisation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, emailOrganisationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from emailOrganisation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for email_organisation")
	}

	if len(emailOrganisationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EmailOrganisation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmailOrganisation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmailOrganisationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmailOrganisationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailOrganisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"email_organisation\".* FROM \"email_organisation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, emailOrganisationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmailOrganisationSlice")
	}

	*o = slice

	return nil
}

// EmailOrganisationExists checks if the EmailOrganisation row exists.
func EmailOrganisationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"email_organisation\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if email_organisation exists")
	}

	return exists, nil
}

// Exists checks if the EmailOrganisation row exists.
func (o *EmailOrganisation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EmailOrganisationExists(ctx, exec, o.ID)
}
