// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Organisation is an object representing the database table.
type Organisation struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Abn                  null.String `boil:"abn" json:"abn,omitempty" toml:"abn" yaml:"abn,omitempty"`
	Address              null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	AnzsicID             null.Int    `boil:"anzsic_id" json:"anzsic_id,omitempty" toml:"anzsic_id" yaml:"anzsic_id,omitempty"`
	BusinessCodeID       int         `boil:"business_code_id" json:"business_code_id" toml:"business_code_id" yaml:"business_code_id"`
	PostcodeID           null.Int    `boil:"postcode_id" json:"postcode_id,omitempty" toml:"postcode_id" yaml:"postcode_id,omitempty"`
	SourceID             null.Int    `boil:"source_id" json:"source_id,omitempty" toml:"source_id" yaml:"source_id,omitempty"`
	OrganisationSourceID int         `boil:"organisation_source_id" json:"organisation_source_id" toml:"organisation_source_id" yaml:"organisation_source_id"`

	R *organisationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organisationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganisationColumns = struct {
	ID                   string
	Name                 string
	Abn                  string
	Address              string
	AnzsicID             string
	BusinessCodeID       string
	PostcodeID           string
	SourceID             string
	OrganisationSourceID string
}{
	ID:                   "id",
	Name:                 "name",
	Abn:                  "abn",
	Address:              "address",
	AnzsicID:             "anzsic_id",
	BusinessCodeID:       "business_code_id",
	PostcodeID:           "postcode_id",
	SourceID:             "source_id",
	OrganisationSourceID: "organisation_source_id",
}

var OrganisationTableColumns = struct {
	ID                   string
	Name                 string
	Abn                  string
	Address              string
	AnzsicID             string
	BusinessCodeID       string
	PostcodeID           string
	SourceID             string
	OrganisationSourceID string
}{
	ID:                   "organisation.id",
	Name:                 "organisation.name",
	Abn:                  "organisation.abn",
	Address:              "organisation.address",
	AnzsicID:             "organisation.anzsic_id",
	BusinessCodeID:       "organisation.business_code_id",
	PostcodeID:           "organisation.postcode_id",
	SourceID:             "organisation.source_id",
	OrganisationSourceID: "organisation.organisation_source_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var OrganisationWhere = struct {
	ID                   whereHelperint
	Name                 whereHelperstring
	Abn                  whereHelpernull_String
	Address              whereHelpernull_String
	AnzsicID             whereHelpernull_Int
	BusinessCodeID       whereHelperint
	PostcodeID           whereHelpernull_Int
	SourceID             whereHelpernull_Int
	OrganisationSourceID whereHelperint
}{
	ID:                   whereHelperint{field: "\"organisation\".\"id\""},
	Name:                 whereHelperstring{field: "\"organisation\".\"name\""},
	Abn:                  whereHelpernull_String{field: "\"organisation\".\"abn\""},
	Address:              whereHelpernull_String{field: "\"organisation\".\"address\""},
	AnzsicID:             whereHelpernull_Int{field: "\"organisation\".\"anzsic_id\""},
	BusinessCodeID:       whereHelperint{field: "\"organisation\".\"business_code_id\""},
	PostcodeID:           whereHelpernull_Int{field: "\"organisation\".\"postcode_id\""},
	SourceID:             whereHelpernull_Int{field: "\"organisation\".\"source_id\""},
	OrganisationSourceID: whereHelperint{field: "\"organisation\".\"organisation_source_id\""},
}

// OrganisationRels is where relationship names are stored.
var OrganisationRels = struct {
	Anzsic             string
	BusinessCode       string
	OrganisationSource string
	Postcode           string
}{
	Anzsic:             "Anzsic",
	BusinessCode:       "BusinessCode",
	OrganisationSource: "OrganisationSource",
	Postcode:           "Postcode",
}

// organisationR is where relationships are stored.
type organisationR struct {
	Anzsic             *Anzsic             `boil:"Anzsic" json:"Anzsic" toml:"Anzsic" yaml:"Anzsic"`
	BusinessCode       *BusinessCode       `boil:"BusinessCode" json:"BusinessCode" toml:"BusinessCode" yaml:"BusinessCode"`
	OrganisationSource *OrganisationSource `boil:"OrganisationSource" json:"OrganisationSource" toml:"OrganisationSource" yaml:"OrganisationSource"`
	Postcode           *Postcode           `boil:"Postcode" json:"Postcode" toml:"Postcode" yaml:"Postcode"`
}

// NewStruct creates a new relationship struct
func (*organisationR) NewStruct() *organisationR {
	return &organisationR{}
}

func (r *organisationR) GetAnzsic() *Anzsic {
	if r == nil {
		return nil
	}
	return r.Anzsic
}

func (r *organisationR) GetBusinessCode() *BusinessCode {
	if r == nil {
		return nil
	}
	return r.BusinessCode
}

func (r *organisationR) GetOrganisationSource() *OrganisationSource {
	if r == nil {
		return nil
	}
	return r.OrganisationSource
}

func (r *organisationR) GetPostcode() *Postcode {
	if r == nil {
		return nil
	}
	return r.Postcode
}

// organisationL is where Load methods for each relationship are stored.
type organisationL struct{}

var (
	organisationAllColumns            = []string{"id", "name", "abn", "address", "anzsic_id", "business_code_id", "postcode_id", "source_id", "organisation_source_id"}
	organisationColumnsWithoutDefault = []string{"name", "business_code_id", "organisation_source_id"}
	organisationColumnsWithDefault    = []string{"id", "abn", "address", "anzsic_id", "postcode_id", "source_id"}
	organisationPrimaryKeyColumns     = []string{"id"}
	organisationGeneratedColumns      = []string{}
)

type (
	// OrganisationSlice is an alias for a slice of pointers to Organisation.
	// This should almost always be used instead of []Organisation.
	OrganisationSlice []*Organisation
	// OrganisationHook is the signature for custom Organisation hook methods
	OrganisationHook func(context.Context, boil.ContextExecutor, *Organisation) error

	organisationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organisationType                 = reflect.TypeOf(&Organisation{})
	organisationMapping              = queries.MakeStructMapping(organisationType)
	organisationPrimaryKeyMapping, _ = queries.BindMapping(organisationType, organisationMapping, organisationPrimaryKeyColumns)
	organisationInsertCacheMut       sync.RWMutex
	organisationInsertCache          = make(map[string]insertCache)
	organisationUpdateCacheMut       sync.RWMutex
	organisationUpdateCache          = make(map[string]updateCache)
	organisationUpsertCacheMut       sync.RWMutex
	organisationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organisationAfterSelectHooks []OrganisationHook

var organisationBeforeInsertHooks []OrganisationHook
var organisationAfterInsertHooks []OrganisationHook

var organisationBeforeUpdateHooks []OrganisationHook
var organisationAfterUpdateHooks []OrganisationHook

var organisationBeforeDeleteHooks []OrganisationHook
var organisationAfterDeleteHooks []OrganisationHook

var organisationBeforeUpsertHooks []OrganisationHook
var organisationAfterUpsertHooks []OrganisationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Organisation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Organisation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Organisation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Organisation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Organisation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Organisation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Organisation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Organisation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Organisation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganisationHook registers your hook function for all future operations.
func AddOrganisationHook(hookPoint boil.HookPoint, organisationHook OrganisationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		organisationAfterSelectHooks = append(organisationAfterSelectHooks, organisationHook)
	case boil.BeforeInsertHook:
		organisationBeforeInsertHooks = append(organisationBeforeInsertHooks, organisationHook)
	case boil.AfterInsertHook:
		organisationAfterInsertHooks = append(organisationAfterInsertHooks, organisationHook)
	case boil.BeforeUpdateHook:
		organisationBeforeUpdateHooks = append(organisationBeforeUpdateHooks, organisationHook)
	case boil.AfterUpdateHook:
		organisationAfterUpdateHooks = append(organisationAfterUpdateHooks, organisationHook)
	case boil.BeforeDeleteHook:
		organisationBeforeDeleteHooks = append(organisationBeforeDeleteHooks, organisationHook)
	case boil.AfterDeleteHook:
		organisationAfterDeleteHooks = append(organisationAfterDeleteHooks, organisationHook)
	case boil.BeforeUpsertHook:
		organisationBeforeUpsertHooks = append(organisationBeforeUpsertHooks, organisationHook)
	case boil.AfterUpsertHook:
		organisationAfterUpsertHooks = append(organisationAfterUpsertHooks, organisationHook)
	}
}

// One returns a single organisation record from the query.
func (q organisationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Organisation, error) {
	o := &Organisation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for organisation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Organisation records from the query.
func (q organisationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganisationSlice, error) {
	var o []*Organisation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Organisation slice")
	}

	if len(organisationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Organisation records in the query.
func (q organisationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count organisation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organisationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if organisation exists")
	}

	return count > 0, nil
}

// Anzsic pointed to by the foreign key.
func (o *Organisation) Anzsic(mods ...qm.QueryMod) anzsicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AnzsicID),
	}

	queryMods = append(queryMods, mods...)

	return Anzsics(queryMods...)
}

// BusinessCode pointed to by the foreign key.
func (o *Organisation) BusinessCode(mods ...qm.QueryMod) businessCodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BusinessCodeID),
	}

	queryMods = append(queryMods, mods...)

	return BusinessCodes(queryMods...)
}

// OrganisationSource pointed to by the foreign key.
func (o *Organisation) OrganisationSource(mods ...qm.QueryMod) organisationSourceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganisationSourceID),
	}

	queryMods = append(queryMods, mods...)

	return OrganisationSources(queryMods...)
}

// Postcode pointed to by the foreign key.
func (o *Organisation) Postcode(mods ...qm.QueryMod) postcodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PostcodeID),
	}

	queryMods = append(queryMods, mods...)

	return Postcodes(queryMods...)
}

// LoadAnzsic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organisationL) LoadAnzsic(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		if !queries.IsNil(object.AnzsicID) {
			args = append(args, object.AnzsicID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AnzsicID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AnzsicID) {
				args = append(args, obj.AnzsicID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`anzsic`),
		qm.WhereIn(`anzsic.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Anzsic")
	}

	var resultSlice []*Anzsic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Anzsic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for anzsic")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for anzsic")
	}

	if len(anzsicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Anzsic = foreign
		if foreign.R == nil {
			foreign.R = &anzsicR{}
		}
		foreign.R.Organisations = append(foreign.R.Organisations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AnzsicID, foreign.ID) {
				local.R.Anzsic = foreign
				if foreign.R == nil {
					foreign.R = &anzsicR{}
				}
				foreign.R.Organisations = append(foreign.R.Organisations, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessCode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organisationL) LoadBusinessCode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.BusinessCodeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.BusinessCodeID {
					continue Outer
				}
			}

			args = append(args, obj.BusinessCodeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`business_code`),
		qm.WhereIn(`business_code.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BusinessCode")
	}

	var resultSlice []*BusinessCode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BusinessCode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for business_code")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for business_code")
	}

	if len(businessCodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessCode = foreign
		if foreign.R == nil {
			foreign.R = &businessCodeR{}
		}
		foreign.R.Organisations = append(foreign.R.Organisations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessCodeID == foreign.ID {
				local.R.BusinessCode = foreign
				if foreign.R == nil {
					foreign.R = &businessCodeR{}
				}
				foreign.R.Organisations = append(foreign.R.Organisations, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganisationSource allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organisationL) LoadOrganisationSource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.OrganisationSourceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.OrganisationSourceID {
					continue Outer
				}
			}

			args = append(args, obj.OrganisationSourceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation_source`),
		qm.WhereIn(`organisation_source.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganisationSource")
	}

	var resultSlice []*OrganisationSource
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganisationSource")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organisation_source")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation_source")
	}

	if len(organisationSourceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganisationSource = foreign
		if foreign.R == nil {
			foreign.R = &organisationSourceR{}
		}
		foreign.R.Organisations = append(foreign.R.Organisations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganisationSourceID == foreign.ID {
				local.R.OrganisationSource = foreign
				if foreign.R == nil {
					foreign.R = &organisationSourceR{}
				}
				foreign.R.Organisations = append(foreign.R.Organisations, local)
				break
			}
		}
	}

	return nil
}

// LoadPostcode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organisationL) LoadPostcode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		if !queries.IsNil(object.PostcodeID) {
			args = append(args, object.PostcodeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PostcodeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PostcodeID) {
				args = append(args, obj.PostcodeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`postcode`),
		qm.WhereIn(`postcode.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Postcode")
	}

	var resultSlice []*Postcode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Postcode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for postcode")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for postcode")
	}

	if len(postcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Postcode = foreign
		if foreign.R == nil {
			foreign.R = &postcodeR{}
		}
		foreign.R.Organisations = append(foreign.R.Organisations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PostcodeID, foreign.ID) {
				local.R.Postcode = foreign
				if foreign.R == nil {
					foreign.R = &postcodeR{}
				}
				foreign.R.Organisations = append(foreign.R.Organisations, local)
				break
			}
		}
	}

	return nil
}

// SetAnzsic of the organisation to the related item.
// Sets o.R.Anzsic to related.
// Adds o to related.R.Organisations.
func (o *Organisation) SetAnzsic(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Anzsic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"anzsic_id"}),
		strmangle.WhereClause("\"", "\"", 2, organisationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AnzsicID, related.ID)
	if o.R == nil {
		o.R = &organisationR{
			Anzsic: related,
		}
	} else {
		o.R.Anzsic = related
	}

	if related.R == nil {
		related.R = &anzsicR{
			Organisations: OrganisationSlice{o},
		}
	} else {
		related.R.Organisations = append(related.R.Organisations, o)
	}

	return nil
}

// RemoveAnzsic relationship.
// Sets o.R.Anzsic to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Organisation) RemoveAnzsic(ctx context.Context, exec boil.ContextExecutor, related *Anzsic) error {
	var err error

	queries.SetScanner(&o.AnzsicID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("anzsic_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Anzsic = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Organisations {
		if queries.Equal(o.AnzsicID, ri.AnzsicID) {
			continue
		}

		ln := len(related.R.Organisations)
		if ln > 1 && i < ln-1 {
			related.R.Organisations[i] = related.R.Organisations[ln-1]
		}
		related.R.Organisations = related.R.Organisations[:ln-1]
		break
	}
	return nil
}

// SetBusinessCode of the organisation to the related item.
// Sets o.R.BusinessCode to related.
// Adds o to related.R.Organisations.
func (o *Organisation) SetBusinessCode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BusinessCode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"business_code_id"}),
		strmangle.WhereClause("\"", "\"", 2, organisationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessCodeID = related.ID
	if o.R == nil {
		o.R = &organisationR{
			BusinessCode: related,
		}
	} else {
		o.R.BusinessCode = related
	}

	if related.R == nil {
		related.R = &businessCodeR{
			Organisations: OrganisationSlice{o},
		}
	} else {
		related.R.Organisations = append(related.R.Organisations, o)
	}

	return nil
}

// SetOrganisationSource of the organisation to the related item.
// Sets o.R.OrganisationSource to related.
// Adds o to related.R.Organisations.
func (o *Organisation) SetOrganisationSource(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganisationSource) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_source_id"}),
		strmangle.WhereClause("\"", "\"", 2, organisationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganisationSourceID = related.ID
	if o.R == nil {
		o.R = &organisationR{
			OrganisationSource: related,
		}
	} else {
		o.R.OrganisationSource = related
	}

	if related.R == nil {
		related.R = &organisationSourceR{
			Organisations: OrganisationSlice{o},
		}
	} else {
		related.R.Organisations = append(related.R.Organisations, o)
	}

	return nil
}

// SetPostcode of the organisation to the related item.
// Sets o.R.Postcode to related.
// Adds o to related.R.Organisations.
func (o *Organisation) SetPostcode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Postcode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"postcode_id"}),
		strmangle.WhereClause("\"", "\"", 2, organisationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PostcodeID, related.ID)
	if o.R == nil {
		o.R = &organisationR{
			Postcode: related,
		}
	} else {
		o.R.Postcode = related
	}

	if related.R == nil {
		related.R = &postcodeR{
			Organisations: OrganisationSlice{o},
		}
	} else {
		related.R.Organisations = append(related.R.Organisations, o)
	}

	return nil
}

// RemovePostcode relationship.
// Sets o.R.Postcode to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Organisation) RemovePostcode(ctx context.Context, exec boil.ContextExecutor, related *Postcode) error {
	var err error

	queries.SetScanner(&o.PostcodeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("postcode_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Postcode = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Organisations {
		if queries.Equal(o.PostcodeID, ri.PostcodeID) {
			continue
		}

		ln := len(related.R.Organisations)
		if ln > 1 && i < ln-1 {
			related.R.Organisations[i] = related.R.Organisations[ln-1]
		}
		related.R.Organisations = related.R.Organisations[:ln-1]
		break
	}
	return nil
}

// Organisations retrieves all the records using an executor.
func Organisations(mods ...qm.QueryMod) organisationQuery {
	mods = append(mods, qm.From("\"organisation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"organisation\".*"})
	}

	return organisationQuery{q}
}

// FindOrganisation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganisation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Organisation, error) {
	organisationObj := &Organisation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organisation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, organisationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from organisation")
	}

	if err = organisationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return organisationObj, err
	}

	return organisationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Organisation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organisation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organisationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organisationInsertCacheMut.RLock()
	cache, cached := organisationInsertCache[key]
	organisationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organisationAllColumns,
			organisationColumnsWithDefault,
			organisationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organisationType, organisationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organisationType, organisationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organisation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organisation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into organisation")
	}

	if !cached {
		organisationInsertCacheMut.Lock()
		organisationInsertCache[key] = cache
		organisationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Organisation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Organisation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organisationUpdateCacheMut.RLock()
	cache, cached := organisationUpdateCache[key]
	organisationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organisationAllColumns,
			organisationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update organisation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organisation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organisationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organisationType, organisationMapping, append(wl, organisationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update organisation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for organisation")
	}

	if !cached {
		organisationUpdateCacheMut.Lock()
		organisationUpdateCache[key] = cache
		organisationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organisationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for organisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for organisation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganisationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organisationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organisation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organisation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Organisation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organisation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organisationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organisationUpsertCacheMut.RLock()
	cache, cached := organisationUpsertCache[key]
	organisationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organisationAllColumns,
			organisationColumnsWithDefault,
			organisationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			organisationAllColumns,
			organisationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert organisation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organisationPrimaryKeyColumns))
			copy(conflict, organisationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organisation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organisationType, organisationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organisationType, organisationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert organisation")
	}

	if !cached {
		organisationUpsertCacheMut.Lock()
		organisationUpsertCache[key] = cache
		organisationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Organisation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Organisation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Organisation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organisationPrimaryKeyMapping)
	sql := "DELETE FROM \"organisation\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from organisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for organisation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organisationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organisationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organisation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganisationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organisationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organisation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organisationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organisation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organisation")
	}

	if len(organisationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Organisation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganisation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganisationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganisationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organisation\".* FROM \"organisation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organisationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganisationSlice")
	}

	*o = slice

	return nil
}

// OrganisationExists checks if the Organisation row exists.
func OrganisationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organisation\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if organisation exists")
	}

	return exists, nil
}

// Exists checks if the Organisation row exists.
func (o *Organisation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrganisationExists(ctx, exec, o.ID)
}
