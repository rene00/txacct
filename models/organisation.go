// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Organisation is an object representing the database table.
type Organisation struct {
	ID                   int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganisationSourceID int      `boil:"organisation_source_id" json:"organisation_source_id" toml:"organisation_source_id" yaml:"organisation_source_id"`
	AnzsicID             null.Int `boil:"anzsic_id" json:"anzsic_id,omitempty" toml:"anzsic_id" yaml:"anzsic_id,omitempty"`
	BusinessCodeID       int      `boil:"business_code_id" json:"business_code_id" toml:"business_code_id" yaml:"business_code_id"`
	PostcodeID           int      `boil:"postcode_id" json:"postcode_id" toml:"postcode_id" yaml:"postcode_id"`

	R *organisationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organisationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganisationColumns = struct {
	ID                   string
	OrganisationSourceID string
	AnzsicID             string
	BusinessCodeID       string
	PostcodeID           string
}{
	ID:                   "id",
	OrganisationSourceID: "organisation_source_id",
	AnzsicID:             "anzsic_id",
	BusinessCodeID:       "business_code_id",
	PostcodeID:           "postcode_id",
}

var OrganisationTableColumns = struct {
	ID                   string
	OrganisationSourceID string
	AnzsicID             string
	BusinessCodeID       string
	PostcodeID           string
}{
	ID:                   "organisation.id",
	OrganisationSourceID: "organisation.organisation_source_id",
	AnzsicID:             "organisation.anzsic_id",
	BusinessCodeID:       "organisation.business_code_id",
	PostcodeID:           "organisation.postcode_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var OrganisationWhere = struct {
	ID                   whereHelperint
	OrganisationSourceID whereHelperint
	AnzsicID             whereHelpernull_Int
	BusinessCodeID       whereHelperint
	PostcodeID           whereHelperint
}{
	ID:                   whereHelperint{field: "\"organisation\".\"id\""},
	OrganisationSourceID: whereHelperint{field: "\"organisation\".\"organisation_source_id\""},
	AnzsicID:             whereHelpernull_Int{field: "\"organisation\".\"anzsic_id\""},
	BusinessCodeID:       whereHelperint{field: "\"organisation\".\"business_code_id\""},
	PostcodeID:           whereHelperint{field: "\"organisation\".\"postcode_id\""},
}

// OrganisationRels is where relationship names are stored.
var OrganisationRels = struct {
	BusinessCode               string
	Postcode                   string
	OrganisationStateAct       string
	OrganisationStateNSW       string
	OrganisationStateNT        string
	OrganisationStateQLD       string
	OrganisationStateSa        string
	OrganisationStateTasmanium string
	OrganisationStateVic       string
	OrganisationStateWa        string
	EmailOrganisations         string
}{
	BusinessCode:               "BusinessCode",
	Postcode:                   "Postcode",
	OrganisationStateAct:       "OrganisationStateAct",
	OrganisationStateNSW:       "OrganisationStateNSW",
	OrganisationStateNT:        "OrganisationStateNT",
	OrganisationStateQLD:       "OrganisationStateQLD",
	OrganisationStateSa:        "OrganisationStateSa",
	OrganisationStateTasmanium: "OrganisationStateTasmanium",
	OrganisationStateVic:       "OrganisationStateVic",
	OrganisationStateWa:        "OrganisationStateWa",
	EmailOrganisations:         "EmailOrganisations",
}

// organisationR is where relationships are stored.
type organisationR struct {
	BusinessCode               *BusinessCode               `boil:"BusinessCode" json:"BusinessCode" toml:"BusinessCode" yaml:"BusinessCode"`
	Postcode                   *Postcode                   `boil:"Postcode" json:"Postcode" toml:"Postcode" yaml:"Postcode"`
	OrganisationStateAct       *OrganisationStateAct       `boil:"OrganisationStateAct" json:"OrganisationStateAct" toml:"OrganisationStateAct" yaml:"OrganisationStateAct"`
	OrganisationStateNSW       *OrganisationStateNSW       `boil:"OrganisationStateNSW" json:"OrganisationStateNSW" toml:"OrganisationStateNSW" yaml:"OrganisationStateNSW"`
	OrganisationStateNT        *OrganisationStateNT        `boil:"OrganisationStateNT" json:"OrganisationStateNT" toml:"OrganisationStateNT" yaml:"OrganisationStateNT"`
	OrganisationStateQLD       *OrganisationStateQLD       `boil:"OrganisationStateQLD" json:"OrganisationStateQLD" toml:"OrganisationStateQLD" yaml:"OrganisationStateQLD"`
	OrganisationStateSa        *OrganisationStateSa        `boil:"OrganisationStateSa" json:"OrganisationStateSa" toml:"OrganisationStateSa" yaml:"OrganisationStateSa"`
	OrganisationStateTasmanium *OrganisationStateTasmanium `boil:"OrganisationStateTasmanium" json:"OrganisationStateTasmanium" toml:"OrganisationStateTasmanium" yaml:"OrganisationStateTasmanium"`
	OrganisationStateVic       *OrganisationStateVic       `boil:"OrganisationStateVic" json:"OrganisationStateVic" toml:"OrganisationStateVic" yaml:"OrganisationStateVic"`
	OrganisationStateWa        *OrganisationStateWa        `boil:"OrganisationStateWa" json:"OrganisationStateWa" toml:"OrganisationStateWa" yaml:"OrganisationStateWa"`
	EmailOrganisations         EmailOrganisationSlice      `boil:"EmailOrganisations" json:"EmailOrganisations" toml:"EmailOrganisations" yaml:"EmailOrganisations"`
}

// NewStruct creates a new relationship struct
func (*organisationR) NewStruct() *organisationR {
	return &organisationR{}
}

func (r *organisationR) GetBusinessCode() *BusinessCode {
	if r == nil {
		return nil
	}
	return r.BusinessCode
}

func (r *organisationR) GetPostcode() *Postcode {
	if r == nil {
		return nil
	}
	return r.Postcode
}

func (r *organisationR) GetOrganisationStateAct() *OrganisationStateAct {
	if r == nil {
		return nil
	}
	return r.OrganisationStateAct
}

func (r *organisationR) GetOrganisationStateNSW() *OrganisationStateNSW {
	if r == nil {
		return nil
	}
	return r.OrganisationStateNSW
}

func (r *organisationR) GetOrganisationStateNT() *OrganisationStateNT {
	if r == nil {
		return nil
	}
	return r.OrganisationStateNT
}

func (r *organisationR) GetOrganisationStateQLD() *OrganisationStateQLD {
	if r == nil {
		return nil
	}
	return r.OrganisationStateQLD
}

func (r *organisationR) GetOrganisationStateSa() *OrganisationStateSa {
	if r == nil {
		return nil
	}
	return r.OrganisationStateSa
}

func (r *organisationR) GetOrganisationStateTasmanium() *OrganisationStateTasmanium {
	if r == nil {
		return nil
	}
	return r.OrganisationStateTasmanium
}

func (r *organisationR) GetOrganisationStateVic() *OrganisationStateVic {
	if r == nil {
		return nil
	}
	return r.OrganisationStateVic
}

func (r *organisationR) GetOrganisationStateWa() *OrganisationStateWa {
	if r == nil {
		return nil
	}
	return r.OrganisationStateWa
}

func (r *organisationR) GetEmailOrganisations() EmailOrganisationSlice {
	if r == nil {
		return nil
	}
	return r.EmailOrganisations
}

// organisationL is where Load methods for each relationship are stored.
type organisationL struct{}

var (
	organisationAllColumns            = []string{"id", "organisation_source_id", "anzsic_id", "business_code_id", "postcode_id"}
	organisationColumnsWithoutDefault = []string{"organisation_source_id", "business_code_id", "postcode_id"}
	organisationColumnsWithDefault    = []string{"id", "anzsic_id"}
	organisationPrimaryKeyColumns     = []string{"id"}
	organisationGeneratedColumns      = []string{}
)

type (
	// OrganisationSlice is an alias for a slice of pointers to Organisation.
	// This should almost always be used instead of []Organisation.
	OrganisationSlice []*Organisation
	// OrganisationHook is the signature for custom Organisation hook methods
	OrganisationHook func(context.Context, boil.ContextExecutor, *Organisation) error

	organisationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organisationType                 = reflect.TypeOf(&Organisation{})
	organisationMapping              = queries.MakeStructMapping(organisationType)
	organisationPrimaryKeyMapping, _ = queries.BindMapping(organisationType, organisationMapping, organisationPrimaryKeyColumns)
	organisationInsertCacheMut       sync.RWMutex
	organisationInsertCache          = make(map[string]insertCache)
	organisationUpdateCacheMut       sync.RWMutex
	organisationUpdateCache          = make(map[string]updateCache)
	organisationUpsertCacheMut       sync.RWMutex
	organisationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organisationAfterSelectHooks []OrganisationHook

var organisationBeforeInsertHooks []OrganisationHook
var organisationAfterInsertHooks []OrganisationHook

var organisationBeforeUpdateHooks []OrganisationHook
var organisationAfterUpdateHooks []OrganisationHook

var organisationBeforeDeleteHooks []OrganisationHook
var organisationAfterDeleteHooks []OrganisationHook

var organisationBeforeUpsertHooks []OrganisationHook
var organisationAfterUpsertHooks []OrganisationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Organisation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Organisation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Organisation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Organisation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Organisation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Organisation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Organisation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Organisation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Organisation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organisationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganisationHook registers your hook function for all future operations.
func AddOrganisationHook(hookPoint boil.HookPoint, organisationHook OrganisationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		organisationAfterSelectHooks = append(organisationAfterSelectHooks, organisationHook)
	case boil.BeforeInsertHook:
		organisationBeforeInsertHooks = append(organisationBeforeInsertHooks, organisationHook)
	case boil.AfterInsertHook:
		organisationAfterInsertHooks = append(organisationAfterInsertHooks, organisationHook)
	case boil.BeforeUpdateHook:
		organisationBeforeUpdateHooks = append(organisationBeforeUpdateHooks, organisationHook)
	case boil.AfterUpdateHook:
		organisationAfterUpdateHooks = append(organisationAfterUpdateHooks, organisationHook)
	case boil.BeforeDeleteHook:
		organisationBeforeDeleteHooks = append(organisationBeforeDeleteHooks, organisationHook)
	case boil.AfterDeleteHook:
		organisationAfterDeleteHooks = append(organisationAfterDeleteHooks, organisationHook)
	case boil.BeforeUpsertHook:
		organisationBeforeUpsertHooks = append(organisationBeforeUpsertHooks, organisationHook)
	case boil.AfterUpsertHook:
		organisationAfterUpsertHooks = append(organisationAfterUpsertHooks, organisationHook)
	}
}

// One returns a single organisation record from the query.
func (q organisationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Organisation, error) {
	o := &Organisation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for organisation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Organisation records from the query.
func (q organisationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganisationSlice, error) {
	var o []*Organisation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Organisation slice")
	}

	if len(organisationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Organisation records in the query.
func (q organisationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count organisation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organisationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if organisation exists")
	}

	return count > 0, nil
}

// BusinessCode pointed to by the foreign key.
func (o *Organisation) BusinessCode(mods ...qm.QueryMod) businessCodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BusinessCodeID),
	}

	queryMods = append(queryMods, mods...)

	return BusinessCodes(queryMods...)
}

// Postcode pointed to by the foreign key.
func (o *Organisation) Postcode(mods ...qm.QueryMod) postcodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PostcodeID),
	}

	queryMods = append(queryMods, mods...)

	return Postcodes(queryMods...)
}

// OrganisationStateAct pointed to by the foreign key.
func (o *Organisation) OrganisationStateAct(mods ...qm.QueryMod) organisationStateActQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"organisation_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return OrganisationStateActs(queryMods...)
}

// OrganisationStateNSW pointed to by the foreign key.
func (o *Organisation) OrganisationStateNSW(mods ...qm.QueryMod) organisationStateNSWQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"organisation_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return OrganisationStateNSWS(queryMods...)
}

// OrganisationStateNT pointed to by the foreign key.
func (o *Organisation) OrganisationStateNT(mods ...qm.QueryMod) organisationStateNTQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"organisation_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return OrganisationStateNTS(queryMods...)
}

// OrganisationStateQLD pointed to by the foreign key.
func (o *Organisation) OrganisationStateQLD(mods ...qm.QueryMod) organisationStateQLDQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"organisation_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return OrganisationStateQLDS(queryMods...)
}

// OrganisationStateSa pointed to by the foreign key.
func (o *Organisation) OrganisationStateSa(mods ...qm.QueryMod) organisationStateSaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"organisation_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return OrganisationStateSas(queryMods...)
}

// OrganisationStateTasmanium pointed to by the foreign key.
func (o *Organisation) OrganisationStateTasmanium(mods ...qm.QueryMod) organisationStateTasmaniumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"organisation_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return OrganisationStateTasmania(queryMods...)
}

// OrganisationStateVic pointed to by the foreign key.
func (o *Organisation) OrganisationStateVic(mods ...qm.QueryMod) organisationStateVicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"organisation_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return OrganisationStateVics(queryMods...)
}

// OrganisationStateWa pointed to by the foreign key.
func (o *Organisation) OrganisationStateWa(mods ...qm.QueryMod) organisationStateWaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"organisation_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return OrganisationStateWas(queryMods...)
}

// EmailOrganisations retrieves all the email_organisation's EmailOrganisations with an executor.
func (o *Organisation) EmailOrganisations(mods ...qm.QueryMod) emailOrganisationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"email_organisation\".\"organisation_id\"=?", o.ID),
	)

	return EmailOrganisations(queryMods...)
}

// LoadBusinessCode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organisationL) LoadBusinessCode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.BusinessCodeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.BusinessCodeID {
					continue Outer
				}
			}

			args = append(args, obj.BusinessCodeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`business_code`),
		qm.WhereIn(`business_code.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BusinessCode")
	}

	var resultSlice []*BusinessCode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BusinessCode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for business_code")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for business_code")
	}

	if len(businessCodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessCode = foreign
		if foreign.R == nil {
			foreign.R = &businessCodeR{}
		}
		foreign.R.Organisations = append(foreign.R.Organisations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessCodeID == foreign.ID {
				local.R.BusinessCode = foreign
				if foreign.R == nil {
					foreign.R = &businessCodeR{}
				}
				foreign.R.Organisations = append(foreign.R.Organisations, local)
				break
			}
		}
	}

	return nil
}

// LoadPostcode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organisationL) LoadPostcode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.PostcodeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.PostcodeID {
					continue Outer
				}
			}

			args = append(args, obj.PostcodeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`postcode`),
		qm.WhereIn(`postcode.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Postcode")
	}

	var resultSlice []*Postcode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Postcode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for postcode")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for postcode")
	}

	if len(postcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Postcode = foreign
		if foreign.R == nil {
			foreign.R = &postcodeR{}
		}
		foreign.R.Organisations = append(foreign.R.Organisations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PostcodeID == foreign.ID {
				local.R.Postcode = foreign
				if foreign.R == nil {
					foreign.R = &postcodeR{}
				}
				foreign.R.Organisations = append(foreign.R.Organisations, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganisationStateAct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (organisationL) LoadOrganisationStateAct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation_state_act`),
		qm.WhereIn(`organisation_state_act.organisation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganisationStateAct")
	}

	var resultSlice []*OrganisationStateAct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganisationStateAct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organisation_state_act")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation_state_act")
	}

	if len(organisationStateActAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganisationStateAct = foreign
		if foreign.R == nil {
			foreign.R = &organisationStateActR{}
		}
		foreign.R.Organisation = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OrganisationID {
				local.R.OrganisationStateAct = foreign
				if foreign.R == nil {
					foreign.R = &organisationStateActR{}
				}
				foreign.R.Organisation = local
				break
			}
		}
	}

	return nil
}

// LoadOrganisationStateNSW allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (organisationL) LoadOrganisationStateNSW(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation_state_nsw`),
		qm.WhereIn(`organisation_state_nsw.organisation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganisationStateNSW")
	}

	var resultSlice []*OrganisationStateNSW
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganisationStateNSW")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organisation_state_nsw")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation_state_nsw")
	}

	if len(organisationStateNSWAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganisationStateNSW = foreign
		if foreign.R == nil {
			foreign.R = &organisationStateNSWR{}
		}
		foreign.R.Organisation = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OrganisationID {
				local.R.OrganisationStateNSW = foreign
				if foreign.R == nil {
					foreign.R = &organisationStateNSWR{}
				}
				foreign.R.Organisation = local
				break
			}
		}
	}

	return nil
}

// LoadOrganisationStateNT allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (organisationL) LoadOrganisationStateNT(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation_state_nt`),
		qm.WhereIn(`organisation_state_nt.organisation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganisationStateNT")
	}

	var resultSlice []*OrganisationStateNT
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganisationStateNT")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organisation_state_nt")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation_state_nt")
	}

	if len(organisationStateNTAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganisationStateNT = foreign
		if foreign.R == nil {
			foreign.R = &organisationStateNTR{}
		}
		foreign.R.Organisation = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OrganisationID {
				local.R.OrganisationStateNT = foreign
				if foreign.R == nil {
					foreign.R = &organisationStateNTR{}
				}
				foreign.R.Organisation = local
				break
			}
		}
	}

	return nil
}

// LoadOrganisationStateQLD allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (organisationL) LoadOrganisationStateQLD(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation_state_qld`),
		qm.WhereIn(`organisation_state_qld.organisation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganisationStateQLD")
	}

	var resultSlice []*OrganisationStateQLD
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganisationStateQLD")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organisation_state_qld")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation_state_qld")
	}

	if len(organisationStateQLDAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganisationStateQLD = foreign
		if foreign.R == nil {
			foreign.R = &organisationStateQLDR{}
		}
		foreign.R.Organisation = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OrganisationID {
				local.R.OrganisationStateQLD = foreign
				if foreign.R == nil {
					foreign.R = &organisationStateQLDR{}
				}
				foreign.R.Organisation = local
				break
			}
		}
	}

	return nil
}

// LoadOrganisationStateSa allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (organisationL) LoadOrganisationStateSa(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation_state_sa`),
		qm.WhereIn(`organisation_state_sa.organisation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganisationStateSa")
	}

	var resultSlice []*OrganisationStateSa
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganisationStateSa")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organisation_state_sa")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation_state_sa")
	}

	if len(organisationStateSaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganisationStateSa = foreign
		if foreign.R == nil {
			foreign.R = &organisationStateSaR{}
		}
		foreign.R.Organisation = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OrganisationID {
				local.R.OrganisationStateSa = foreign
				if foreign.R == nil {
					foreign.R = &organisationStateSaR{}
				}
				foreign.R.Organisation = local
				break
			}
		}
	}

	return nil
}

// LoadOrganisationStateTasmanium allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (organisationL) LoadOrganisationStateTasmanium(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation_state_tasmania`),
		qm.WhereIn(`organisation_state_tasmania.organisation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganisationStateTasmanium")
	}

	var resultSlice []*OrganisationStateTasmanium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganisationStateTasmanium")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organisation_state_tasmania")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation_state_tasmania")
	}

	if len(organisationStateTasmaniumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganisationStateTasmanium = foreign
		if foreign.R == nil {
			foreign.R = &organisationStateTasmaniumR{}
		}
		foreign.R.Organisation = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OrganisationID {
				local.R.OrganisationStateTasmanium = foreign
				if foreign.R == nil {
					foreign.R = &organisationStateTasmaniumR{}
				}
				foreign.R.Organisation = local
				break
			}
		}
	}

	return nil
}

// LoadOrganisationStateVic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (organisationL) LoadOrganisationStateVic(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation_state_vic`),
		qm.WhereIn(`organisation_state_vic.organisation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganisationStateVic")
	}

	var resultSlice []*OrganisationStateVic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganisationStateVic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organisation_state_vic")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation_state_vic")
	}

	if len(organisationStateVicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganisationStateVic = foreign
		if foreign.R == nil {
			foreign.R = &organisationStateVicR{}
		}
		foreign.R.Organisation = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OrganisationID {
				local.R.OrganisationStateVic = foreign
				if foreign.R == nil {
					foreign.R = &organisationStateVicR{}
				}
				foreign.R.Organisation = local
				break
			}
		}
	}

	return nil
}

// LoadOrganisationStateWa allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (organisationL) LoadOrganisationStateWa(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation_state_wa`),
		qm.WhereIn(`organisation_state_wa.organisation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganisationStateWa")
	}

	var resultSlice []*OrganisationStateWa
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganisationStateWa")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organisation_state_wa")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation_state_wa")
	}

	if len(organisationStateWaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganisationStateWa = foreign
		if foreign.R == nil {
			foreign.R = &organisationStateWaR{}
		}
		foreign.R.Organisation = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OrganisationID {
				local.R.OrganisationStateWa = foreign
				if foreign.R == nil {
					foreign.R = &organisationStateWaR{}
				}
				foreign.R.Organisation = local
				break
			}
		}
	}

	return nil
}

// LoadEmailOrganisations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organisationL) LoadEmailOrganisations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganisation interface{}, mods queries.Applicator) error {
	var slice []*Organisation
	var object *Organisation

	if singular {
		var ok bool
		object, ok = maybeOrganisation.(*Organisation)
		if !ok {
			object = new(Organisation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganisation))
			}
		}
	} else {
		s, ok := maybeOrganisation.(*[]*Organisation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganisation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganisation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organisationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organisationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`email_organisation`),
		qm.WhereIn(`email_organisation.organisation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load email_organisation")
	}

	var resultSlice []*EmailOrganisation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice email_organisation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on email_organisation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for email_organisation")
	}

	if len(emailOrganisationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EmailOrganisations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &emailOrganisationR{}
			}
			foreign.R.Organisation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganisationID {
				local.R.EmailOrganisations = append(local.R.EmailOrganisations, foreign)
				if foreign.R == nil {
					foreign.R = &emailOrganisationR{}
				}
				foreign.R.Organisation = local
				break
			}
		}
	}

	return nil
}

// SetBusinessCode of the organisation to the related item.
// Sets o.R.BusinessCode to related.
// Adds o to related.R.Organisations.
func (o *Organisation) SetBusinessCode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BusinessCode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"business_code_id"}),
		strmangle.WhereClause("\"", "\"", 2, organisationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessCodeID = related.ID
	if o.R == nil {
		o.R = &organisationR{
			BusinessCode: related,
		}
	} else {
		o.R.BusinessCode = related
	}

	if related.R == nil {
		related.R = &businessCodeR{
			Organisations: OrganisationSlice{o},
		}
	} else {
		related.R.Organisations = append(related.R.Organisations, o)
	}

	return nil
}

// SetPostcode of the organisation to the related item.
// Sets o.R.Postcode to related.
// Adds o to related.R.Organisations.
func (o *Organisation) SetPostcode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Postcode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"postcode_id"}),
		strmangle.WhereClause("\"", "\"", 2, organisationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PostcodeID = related.ID
	if o.R == nil {
		o.R = &organisationR{
			Postcode: related,
		}
	} else {
		o.R.Postcode = related
	}

	if related.R == nil {
		related.R = &postcodeR{
			Organisations: OrganisationSlice{o},
		}
	} else {
		related.R.Organisations = append(related.R.Organisations, o)
	}

	return nil
}

// SetOrganisationStateAct of the organisation to the related item.
// Sets o.R.OrganisationStateAct to related.
// Adds o to related.R.Organisation.
func (o *Organisation) SetOrganisationStateAct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganisationStateAct) error {
	var err error

	if insert {
		related.OrganisationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"organisation_state_act\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_id"}),
			strmangle.WhereClause("\"", "\"", 2, organisationStateActPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OrganisationID = o.ID
	}

	if o.R == nil {
		o.R = &organisationR{
			OrganisationStateAct: related,
		}
	} else {
		o.R.OrganisationStateAct = related
	}

	if related.R == nil {
		related.R = &organisationStateActR{
			Organisation: o,
		}
	} else {
		related.R.Organisation = o
	}
	return nil
}

// SetOrganisationStateNSW of the organisation to the related item.
// Sets o.R.OrganisationStateNSW to related.
// Adds o to related.R.Organisation.
func (o *Organisation) SetOrganisationStateNSW(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganisationStateNSW) error {
	var err error

	if insert {
		related.OrganisationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"organisation_state_nsw\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_id"}),
			strmangle.WhereClause("\"", "\"", 2, organisationStateNSWPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OrganisationID = o.ID
	}

	if o.R == nil {
		o.R = &organisationR{
			OrganisationStateNSW: related,
		}
	} else {
		o.R.OrganisationStateNSW = related
	}

	if related.R == nil {
		related.R = &organisationStateNSWR{
			Organisation: o,
		}
	} else {
		related.R.Organisation = o
	}
	return nil
}

// SetOrganisationStateNT of the organisation to the related item.
// Sets o.R.OrganisationStateNT to related.
// Adds o to related.R.Organisation.
func (o *Organisation) SetOrganisationStateNT(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganisationStateNT) error {
	var err error

	if insert {
		related.OrganisationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"organisation_state_nt\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_id"}),
			strmangle.WhereClause("\"", "\"", 2, organisationStateNTPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OrganisationID = o.ID
	}

	if o.R == nil {
		o.R = &organisationR{
			OrganisationStateNT: related,
		}
	} else {
		o.R.OrganisationStateNT = related
	}

	if related.R == nil {
		related.R = &organisationStateNTR{
			Organisation: o,
		}
	} else {
		related.R.Organisation = o
	}
	return nil
}

// SetOrganisationStateQLD of the organisation to the related item.
// Sets o.R.OrganisationStateQLD to related.
// Adds o to related.R.Organisation.
func (o *Organisation) SetOrganisationStateQLD(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganisationStateQLD) error {
	var err error

	if insert {
		related.OrganisationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"organisation_state_qld\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_id"}),
			strmangle.WhereClause("\"", "\"", 2, organisationStateQLDPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OrganisationID = o.ID
	}

	if o.R == nil {
		o.R = &organisationR{
			OrganisationStateQLD: related,
		}
	} else {
		o.R.OrganisationStateQLD = related
	}

	if related.R == nil {
		related.R = &organisationStateQLDR{
			Organisation: o,
		}
	} else {
		related.R.Organisation = o
	}
	return nil
}

// SetOrganisationStateSa of the organisation to the related item.
// Sets o.R.OrganisationStateSa to related.
// Adds o to related.R.Organisation.
func (o *Organisation) SetOrganisationStateSa(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganisationStateSa) error {
	var err error

	if insert {
		related.OrganisationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"organisation_state_sa\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_id"}),
			strmangle.WhereClause("\"", "\"", 2, organisationStateSaPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OrganisationID = o.ID
	}

	if o.R == nil {
		o.R = &organisationR{
			OrganisationStateSa: related,
		}
	} else {
		o.R.OrganisationStateSa = related
	}

	if related.R == nil {
		related.R = &organisationStateSaR{
			Organisation: o,
		}
	} else {
		related.R.Organisation = o
	}
	return nil
}

// SetOrganisationStateTasmanium of the organisation to the related item.
// Sets o.R.OrganisationStateTasmanium to related.
// Adds o to related.R.Organisation.
func (o *Organisation) SetOrganisationStateTasmanium(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganisationStateTasmanium) error {
	var err error

	if insert {
		related.OrganisationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"organisation_state_tasmania\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_id"}),
			strmangle.WhereClause("\"", "\"", 2, organisationStateTasmaniumPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OrganisationID = o.ID
	}

	if o.R == nil {
		o.R = &organisationR{
			OrganisationStateTasmanium: related,
		}
	} else {
		o.R.OrganisationStateTasmanium = related
	}

	if related.R == nil {
		related.R = &organisationStateTasmaniumR{
			Organisation: o,
		}
	} else {
		related.R.Organisation = o
	}
	return nil
}

// SetOrganisationStateVic of the organisation to the related item.
// Sets o.R.OrganisationStateVic to related.
// Adds o to related.R.Organisation.
func (o *Organisation) SetOrganisationStateVic(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganisationStateVic) error {
	var err error

	if insert {
		related.OrganisationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"organisation_state_vic\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_id"}),
			strmangle.WhereClause("\"", "\"", 2, organisationStateVicPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OrganisationID = o.ID
	}

	if o.R == nil {
		o.R = &organisationR{
			OrganisationStateVic: related,
		}
	} else {
		o.R.OrganisationStateVic = related
	}

	if related.R == nil {
		related.R = &organisationStateVicR{
			Organisation: o,
		}
	} else {
		related.R.Organisation = o
	}
	return nil
}

// SetOrganisationStateWa of the organisation to the related item.
// Sets o.R.OrganisationStateWa to related.
// Adds o to related.R.Organisation.
func (o *Organisation) SetOrganisationStateWa(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganisationStateWa) error {
	var err error

	if insert {
		related.OrganisationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"organisation_state_wa\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_id"}),
			strmangle.WhereClause("\"", "\"", 2, organisationStateWaPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OrganisationID = o.ID
	}

	if o.R == nil {
		o.R = &organisationR{
			OrganisationStateWa: related,
		}
	} else {
		o.R.OrganisationStateWa = related
	}

	if related.R == nil {
		related.R = &organisationStateWaR{
			Organisation: o,
		}
	} else {
		related.R.Organisation = o
	}
	return nil
}

// AddEmailOrganisations adds the given related objects to the existing relationships
// of the organisation, optionally inserting them as new records.
// Appends related to o.R.EmailOrganisations.
// Sets related.R.Organisation appropriately.
func (o *Organisation) AddEmailOrganisations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EmailOrganisation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganisationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"email_organisation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organisation_id"}),
				strmangle.WhereClause("\"", "\"", 2, emailOrganisationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganisationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organisationR{
			EmailOrganisations: related,
		}
	} else {
		o.R.EmailOrganisations = append(o.R.EmailOrganisations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &emailOrganisationR{
				Organisation: o,
			}
		} else {
			rel.R.Organisation = o
		}
	}
	return nil
}

// Organisations retrieves all the records using an executor.
func Organisations(mods ...qm.QueryMod) organisationQuery {
	mods = append(mods, qm.From("\"organisation\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"organisation\".*"})
	}

	return organisationQuery{q}
}

// FindOrganisation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganisation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Organisation, error) {
	organisationObj := &Organisation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organisation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, organisationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from organisation")
	}

	if err = organisationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return organisationObj, err
	}

	return organisationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Organisation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organisation provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organisationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organisationInsertCacheMut.RLock()
	cache, cached := organisationInsertCache[key]
	organisationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organisationAllColumns,
			organisationColumnsWithDefault,
			organisationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organisationType, organisationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organisationType, organisationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organisation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organisation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into organisation")
	}

	if !cached {
		organisationInsertCacheMut.Lock()
		organisationInsertCache[key] = cache
		organisationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Organisation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Organisation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organisationUpdateCacheMut.RLock()
	cache, cached := organisationUpdateCache[key]
	organisationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organisationAllColumns,
			organisationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update organisation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organisation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organisationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organisationType, organisationMapping, append(wl, organisationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update organisation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for organisation")
	}

	if !cached {
		organisationUpdateCacheMut.Lock()
		organisationUpdateCache[key] = cache
		organisationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organisationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for organisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for organisation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganisationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organisation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organisationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organisation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organisation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Organisation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organisation provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organisationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organisationUpsertCacheMut.RLock()
	cache, cached := organisationUpsertCache[key]
	organisationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organisationAllColumns,
			organisationColumnsWithDefault,
			organisationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			organisationAllColumns,
			organisationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert organisation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organisationPrimaryKeyColumns))
			copy(conflict, organisationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organisation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organisationType, organisationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organisationType, organisationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert organisation")
	}

	if !cached {
		organisationUpsertCacheMut.Lock()
		organisationUpsertCache[key] = cache
		organisationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Organisation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Organisation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Organisation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organisationPrimaryKeyMapping)
	sql := "DELETE FROM \"organisation\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from organisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for organisation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organisationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organisationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organisation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organisation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganisationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organisationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organisation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organisationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organisation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organisation")
	}

	if len(organisationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Organisation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganisation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganisationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganisationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organisationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organisation\".* FROM \"organisation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organisationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganisationSlice")
	}

	*o = slice

	return nil
}

// OrganisationExists checks if the Organisation row exists.
func OrganisationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organisation\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if organisation exists")
	}

	return exists, nil
}

// Exists checks if the Organisation row exists.
func (o *Organisation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrganisationExists(ctx, exec, o.ID)
}
