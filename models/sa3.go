// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sa3 is an object representing the database table.
type Sa3 struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code int    `boil:"code" json:"code" toml:"code" yaml:"code"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *sa3R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sa3L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var Sa3Columns = struct {
	ID   string
	Code string
	Name string
}{
	ID:   "id",
	Code: "code",
	Name: "name",
}

var Sa3TableColumns = struct {
	ID   string
	Code string
	Name string
}{
	ID:   "sa3.id",
	Code: "sa3.code",
	Name: "sa3.name",
}

// Generated where

var Sa3Where = struct {
	ID   whereHelperint
	Code whereHelperint
	Name whereHelperstring
}{
	ID:   whereHelperint{field: "\"sa3\".\"id\""},
	Code: whereHelperint{field: "\"sa3\".\"code\""},
	Name: whereHelperstring{field: "\"sa3\".\"name\""},
}

// Sa3Rels is where relationship names are stored.
var Sa3Rels = struct {
	Postcodes string
}{
	Postcodes: "Postcodes",
}

// sa3R is where relationships are stored.
type sa3R struct {
	Postcodes PostcodeSlice `boil:"Postcodes" json:"Postcodes" toml:"Postcodes" yaml:"Postcodes"`
}

// NewStruct creates a new relationship struct
func (*sa3R) NewStruct() *sa3R {
	return &sa3R{}
}

func (r *sa3R) GetPostcodes() PostcodeSlice {
	if r == nil {
		return nil
	}
	return r.Postcodes
}

// sa3L is where Load methods for each relationship are stored.
type sa3L struct{}

var (
	sa3AllColumns            = []string{"id", "code", "name"}
	sa3ColumnsWithoutDefault = []string{"code", "name"}
	sa3ColumnsWithDefault    = []string{"id"}
	sa3PrimaryKeyColumns     = []string{"id"}
	sa3GeneratedColumns      = []string{}
)

type (
	// Sa3Slice is an alias for a slice of pointers to Sa3.
	// This should almost always be used instead of []Sa3.
	Sa3Slice []*Sa3
	// Sa3Hook is the signature for custom Sa3 hook methods
	Sa3Hook func(context.Context, boil.ContextExecutor, *Sa3) error

	sa3Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sa3Type                 = reflect.TypeOf(&Sa3{})
	sa3Mapping              = queries.MakeStructMapping(sa3Type)
	sa3PrimaryKeyMapping, _ = queries.BindMapping(sa3Type, sa3Mapping, sa3PrimaryKeyColumns)
	sa3InsertCacheMut       sync.RWMutex
	sa3InsertCache          = make(map[string]insertCache)
	sa3UpdateCacheMut       sync.RWMutex
	sa3UpdateCache          = make(map[string]updateCache)
	sa3UpsertCacheMut       sync.RWMutex
	sa3UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sa3AfterSelectHooks []Sa3Hook

var sa3BeforeInsertHooks []Sa3Hook
var sa3AfterInsertHooks []Sa3Hook

var sa3BeforeUpdateHooks []Sa3Hook
var sa3AfterUpdateHooks []Sa3Hook

var sa3BeforeDeleteHooks []Sa3Hook
var sa3AfterDeleteHooks []Sa3Hook

var sa3BeforeUpsertHooks []Sa3Hook
var sa3AfterUpsertHooks []Sa3Hook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sa3) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sa3AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sa3) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sa3BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sa3) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sa3AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sa3) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sa3BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sa3) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sa3AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sa3) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sa3BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sa3) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sa3AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sa3) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sa3BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sa3) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sa3AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSa3Hook registers your hook function for all future operations.
func AddSa3Hook(hookPoint boil.HookPoint, sa3Hook Sa3Hook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sa3AfterSelectHooks = append(sa3AfterSelectHooks, sa3Hook)
	case boil.BeforeInsertHook:
		sa3BeforeInsertHooks = append(sa3BeforeInsertHooks, sa3Hook)
	case boil.AfterInsertHook:
		sa3AfterInsertHooks = append(sa3AfterInsertHooks, sa3Hook)
	case boil.BeforeUpdateHook:
		sa3BeforeUpdateHooks = append(sa3BeforeUpdateHooks, sa3Hook)
	case boil.AfterUpdateHook:
		sa3AfterUpdateHooks = append(sa3AfterUpdateHooks, sa3Hook)
	case boil.BeforeDeleteHook:
		sa3BeforeDeleteHooks = append(sa3BeforeDeleteHooks, sa3Hook)
	case boil.AfterDeleteHook:
		sa3AfterDeleteHooks = append(sa3AfterDeleteHooks, sa3Hook)
	case boil.BeforeUpsertHook:
		sa3BeforeUpsertHooks = append(sa3BeforeUpsertHooks, sa3Hook)
	case boil.AfterUpsertHook:
		sa3AfterUpsertHooks = append(sa3AfterUpsertHooks, sa3Hook)
	}
}

// One returns a single sa3 record from the query.
func (q sa3Query) One(ctx context.Context, exec boil.ContextExecutor) (*Sa3, error) {
	o := &Sa3{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sa3")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Sa3 records from the query.
func (q sa3Query) All(ctx context.Context, exec boil.ContextExecutor) (Sa3Slice, error) {
	var o []*Sa3

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Sa3 slice")
	}

	if len(sa3AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Sa3 records in the query.
func (q sa3Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sa3 rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sa3Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sa3 exists")
	}

	return count > 0, nil
}

// Postcodes retrieves all the postcode's Postcodes with an executor.
func (o *Sa3) Postcodes(mods ...qm.QueryMod) postcodeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"postcode\".\"sa3_id\"=?", o.ID),
	)

	return Postcodes(queryMods...)
}

// LoadPostcodes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sa3L) LoadPostcodes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSa3 interface{}, mods queries.Applicator) error {
	var slice []*Sa3
	var object *Sa3

	if singular {
		var ok bool
		object, ok = maybeSa3.(*Sa3)
		if !ok {
			object = new(Sa3)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSa3)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSa3))
			}
		}
	} else {
		s, ok := maybeSa3.(*[]*Sa3)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSa3)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSa3))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sa3R{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sa3R{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`postcode`),
		qm.WhereIn(`postcode.sa3_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load postcode")
	}

	var resultSlice []*Postcode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice postcode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on postcode")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for postcode")
	}

	if len(postcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Postcodes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postcodeR{}
			}
			foreign.R.Sa3 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Sa3ID) {
				local.R.Postcodes = append(local.R.Postcodes, foreign)
				if foreign.R == nil {
					foreign.R = &postcodeR{}
				}
				foreign.R.Sa3 = local
				break
			}
		}
	}

	return nil
}

// AddPostcodes adds the given related objects to the existing relationships
// of the sa3, optionally inserting them as new records.
// Appends related to o.R.Postcodes.
// Sets related.R.Sa3 appropriately.
func (o *Sa3) AddPostcodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Postcode) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Sa3ID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"postcode\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sa3_id"}),
				strmangle.WhereClause("\"", "\"", 2, postcodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Sa3ID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sa3R{
			Postcodes: related,
		}
	} else {
		o.R.Postcodes = append(o.R.Postcodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postcodeR{
				Sa3: o,
			}
		} else {
			rel.R.Sa3 = o
		}
	}
	return nil
}

// SetPostcodes removes all previously related items of the
// sa3 replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sa3's Postcodes accordingly.
// Replaces o.R.Postcodes with related.
// Sets related.R.Sa3's Postcodes accordingly.
func (o *Sa3) SetPostcodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Postcode) error {
	query := "update \"postcode\" set \"sa3_id\" = null where \"sa3_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Postcodes {
			queries.SetScanner(&rel.Sa3ID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sa3 = nil
		}
		o.R.Postcodes = nil
	}

	return o.AddPostcodes(ctx, exec, insert, related...)
}

// RemovePostcodes relationships from objects passed in.
// Removes related items from R.Postcodes (uses pointer comparison, removal does not keep order)
// Sets related.R.Sa3.
func (o *Sa3) RemovePostcodes(ctx context.Context, exec boil.ContextExecutor, related ...*Postcode) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Sa3ID, nil)
		if rel.R != nil {
			rel.R.Sa3 = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("sa3_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Postcodes {
			if rel != ri {
				continue
			}

			ln := len(o.R.Postcodes)
			if ln > 1 && i < ln-1 {
				o.R.Postcodes[i] = o.R.Postcodes[ln-1]
			}
			o.R.Postcodes = o.R.Postcodes[:ln-1]
			break
		}
	}

	return nil
}

// Sa3s retrieves all the records using an executor.
func Sa3s(mods ...qm.QueryMod) sa3Query {
	mods = append(mods, qm.From("\"sa3\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sa3\".*"})
	}

	return sa3Query{q}
}

// FindSa3 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSa3(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Sa3, error) {
	sa3Obj := &Sa3{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sa3\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sa3Obj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sa3")
	}

	if err = sa3Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return sa3Obj, err
	}

	return sa3Obj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sa3) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sa3 provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sa3ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sa3InsertCacheMut.RLock()
	cache, cached := sa3InsertCache[key]
	sa3InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sa3AllColumns,
			sa3ColumnsWithDefault,
			sa3ColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sa3Type, sa3Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sa3Type, sa3Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sa3\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sa3\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sa3")
	}

	if !cached {
		sa3InsertCacheMut.Lock()
		sa3InsertCache[key] = cache
		sa3InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Sa3.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sa3) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sa3UpdateCacheMut.RLock()
	cache, cached := sa3UpdateCache[key]
	sa3UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sa3AllColumns,
			sa3PrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sa3, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sa3\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sa3PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sa3Type, sa3Mapping, append(wl, sa3PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sa3 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sa3")
	}

	if !cached {
		sa3UpdateCacheMut.Lock()
		sa3UpdateCache[key] = cache
		sa3UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sa3Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sa3")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sa3")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o Sa3Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sa3PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sa3\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sa3PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sa3 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sa3")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sa3) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sa3 provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sa3ColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sa3UpsertCacheMut.RLock()
	cache, cached := sa3UpsertCache[key]
	sa3UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sa3AllColumns,
			sa3ColumnsWithDefault,
			sa3ColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sa3AllColumns,
			sa3PrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sa3, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sa3PrimaryKeyColumns))
			copy(conflict, sa3PrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sa3\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sa3Type, sa3Mapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sa3Type, sa3Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sa3")
	}

	if !cached {
		sa3UpsertCacheMut.Lock()
		sa3UpsertCache[key] = cache
		sa3UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Sa3 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sa3) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Sa3 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sa3PrimaryKeyMapping)
	sql := "DELETE FROM \"sa3\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sa3")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sa3")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sa3Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sa3Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sa3")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sa3")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o Sa3Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sa3BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sa3PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sa3\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sa3PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sa3 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sa3")
	}

	if len(sa3AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sa3) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSa3(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *Sa3Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := Sa3Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sa3PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sa3\".* FROM \"sa3\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sa3PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in Sa3Slice")
	}

	*o = slice

	return nil
}

// Sa3Exists checks if the Sa3 row exists.
func Sa3Exists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sa3\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sa3 exists")
	}

	return exists, nil
}

// Exists checks if the Sa3 row exists.
func (o *Sa3) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return Sa3Exists(ctx, exec, o.ID)
}
