// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Postcode is an object representing the database table.
type Postcode struct {
	ID       int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Postcode string   `boil:"postcode" json:"postcode" toml:"postcode" yaml:"postcode"`
	Locality string   `boil:"locality" json:"locality" toml:"locality" yaml:"locality"`
	StateID  int      `boil:"state_id" json:"state_id" toml:"state_id" yaml:"state_id"`
	Sa3ID    null.Int `boil:"sa3_id" json:"sa3_id,omitempty" toml:"sa3_id" yaml:"sa3_id,omitempty"`
	Sa4ID    null.Int `boil:"sa4_id" json:"sa4_id,omitempty" toml:"sa4_id" yaml:"sa4_id,omitempty"`

	R *postcodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postcodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostcodeColumns = struct {
	ID       string
	Postcode string
	Locality string
	StateID  string
	Sa3ID    string
	Sa4ID    string
}{
	ID:       "id",
	Postcode: "postcode",
	Locality: "locality",
	StateID:  "state_id",
	Sa3ID:    "sa3_id",
	Sa4ID:    "sa4_id",
}

var PostcodeTableColumns = struct {
	ID       string
	Postcode string
	Locality string
	StateID  string
	Sa3ID    string
	Sa4ID    string
}{
	ID:       "postcode.id",
	Postcode: "postcode.postcode",
	Locality: "postcode.locality",
	StateID:  "postcode.state_id",
	Sa3ID:    "postcode.sa3_id",
	Sa4ID:    "postcode.sa4_id",
}

// Generated where

var PostcodeWhere = struct {
	ID       whereHelperint
	Postcode whereHelperstring
	Locality whereHelperstring
	StateID  whereHelperint
	Sa3ID    whereHelpernull_Int
	Sa4ID    whereHelpernull_Int
}{
	ID:       whereHelperint{field: "\"postcode\".\"id\""},
	Postcode: whereHelperstring{field: "\"postcode\".\"postcode\""},
	Locality: whereHelperstring{field: "\"postcode\".\"locality\""},
	StateID:  whereHelperint{field: "\"postcode\".\"state_id\""},
	Sa3ID:    whereHelpernull_Int{field: "\"postcode\".\"sa3_id\""},
	Sa4ID:    whereHelpernull_Int{field: "\"postcode\".\"sa4_id\""},
}

// PostcodeRels is where relationship names are stored.
var PostcodeRels = struct {
	Sa3           string
	Sa4           string
	State         string
	Organisations string
}{
	Sa3:           "Sa3",
	Sa4:           "Sa4",
	State:         "State",
	Organisations: "Organisations",
}

// postcodeR is where relationships are stored.
type postcodeR struct {
	Sa3           *Sa3              `boil:"Sa3" json:"Sa3" toml:"Sa3" yaml:"Sa3"`
	Sa4           *Sa4              `boil:"Sa4" json:"Sa4" toml:"Sa4" yaml:"Sa4"`
	State         *State            `boil:"State" json:"State" toml:"State" yaml:"State"`
	Organisations OrganisationSlice `boil:"Organisations" json:"Organisations" toml:"Organisations" yaml:"Organisations"`
}

// NewStruct creates a new relationship struct
func (*postcodeR) NewStruct() *postcodeR {
	return &postcodeR{}
}

func (r *postcodeR) GetSa3() *Sa3 {
	if r == nil {
		return nil
	}
	return r.Sa3
}

func (r *postcodeR) GetSa4() *Sa4 {
	if r == nil {
		return nil
	}
	return r.Sa4
}

func (r *postcodeR) GetState() *State {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *postcodeR) GetOrganisations() OrganisationSlice {
	if r == nil {
		return nil
	}
	return r.Organisations
}

// postcodeL is where Load methods for each relationship are stored.
type postcodeL struct{}

var (
	postcodeAllColumns            = []string{"id", "postcode", "locality", "state_id", "sa3_id", "sa4_id"}
	postcodeColumnsWithoutDefault = []string{"postcode", "locality", "state_id"}
	postcodeColumnsWithDefault    = []string{"id", "sa3_id", "sa4_id"}
	postcodePrimaryKeyColumns     = []string{"id"}
	postcodeGeneratedColumns      = []string{}
)

type (
	// PostcodeSlice is an alias for a slice of pointers to Postcode.
	// This should almost always be used instead of []Postcode.
	PostcodeSlice []*Postcode
	// PostcodeHook is the signature for custom Postcode hook methods
	PostcodeHook func(context.Context, boil.ContextExecutor, *Postcode) error

	postcodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postcodeType                 = reflect.TypeOf(&Postcode{})
	postcodeMapping              = queries.MakeStructMapping(postcodeType)
	postcodePrimaryKeyMapping, _ = queries.BindMapping(postcodeType, postcodeMapping, postcodePrimaryKeyColumns)
	postcodeInsertCacheMut       sync.RWMutex
	postcodeInsertCache          = make(map[string]insertCache)
	postcodeUpdateCacheMut       sync.RWMutex
	postcodeUpdateCache          = make(map[string]updateCache)
	postcodeUpsertCacheMut       sync.RWMutex
	postcodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postcodeAfterSelectHooks []PostcodeHook

var postcodeBeforeInsertHooks []PostcodeHook
var postcodeAfterInsertHooks []PostcodeHook

var postcodeBeforeUpdateHooks []PostcodeHook
var postcodeAfterUpdateHooks []PostcodeHook

var postcodeBeforeDeleteHooks []PostcodeHook
var postcodeAfterDeleteHooks []PostcodeHook

var postcodeBeforeUpsertHooks []PostcodeHook
var postcodeAfterUpsertHooks []PostcodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Postcode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postcodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Postcode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postcodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Postcode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postcodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Postcode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postcodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Postcode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postcodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Postcode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postcodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Postcode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postcodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Postcode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postcodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Postcode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postcodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostcodeHook registers your hook function for all future operations.
func AddPostcodeHook(hookPoint boil.HookPoint, postcodeHook PostcodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postcodeAfterSelectHooks = append(postcodeAfterSelectHooks, postcodeHook)
	case boil.BeforeInsertHook:
		postcodeBeforeInsertHooks = append(postcodeBeforeInsertHooks, postcodeHook)
	case boil.AfterInsertHook:
		postcodeAfterInsertHooks = append(postcodeAfterInsertHooks, postcodeHook)
	case boil.BeforeUpdateHook:
		postcodeBeforeUpdateHooks = append(postcodeBeforeUpdateHooks, postcodeHook)
	case boil.AfterUpdateHook:
		postcodeAfterUpdateHooks = append(postcodeAfterUpdateHooks, postcodeHook)
	case boil.BeforeDeleteHook:
		postcodeBeforeDeleteHooks = append(postcodeBeforeDeleteHooks, postcodeHook)
	case boil.AfterDeleteHook:
		postcodeAfterDeleteHooks = append(postcodeAfterDeleteHooks, postcodeHook)
	case boil.BeforeUpsertHook:
		postcodeBeforeUpsertHooks = append(postcodeBeforeUpsertHooks, postcodeHook)
	case boil.AfterUpsertHook:
		postcodeAfterUpsertHooks = append(postcodeAfterUpsertHooks, postcodeHook)
	}
}

// One returns a single postcode record from the query.
func (q postcodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Postcode, error) {
	o := &Postcode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for postcode")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Postcode records from the query.
func (q postcodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostcodeSlice, error) {
	var o []*Postcode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Postcode slice")
	}

	if len(postcodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Postcode records in the query.
func (q postcodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count postcode rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postcodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if postcode exists")
	}

	return count > 0, nil
}

// Sa3 pointed to by the foreign key.
func (o *Postcode) Sa3(mods ...qm.QueryMod) sa3Query {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Sa3ID),
	}

	queryMods = append(queryMods, mods...)

	return Sa3s(queryMods...)
}

// Sa4 pointed to by the foreign key.
func (o *Postcode) Sa4(mods ...qm.QueryMod) sa4Query {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Sa4ID),
	}

	queryMods = append(queryMods, mods...)

	return Sa4s(queryMods...)
}

// State pointed to by the foreign key.
func (o *Postcode) State(mods ...qm.QueryMod) stateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StateID),
	}

	queryMods = append(queryMods, mods...)

	return States(queryMods...)
}

// Organisations retrieves all the organisation's Organisations with an executor.
func (o *Postcode) Organisations(mods ...qm.QueryMod) organisationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organisation\".\"postcode_id\"=?", o.ID),
	)

	return Organisations(queryMods...)
}

// LoadSa3 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postcodeL) LoadSa3(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostcode interface{}, mods queries.Applicator) error {
	var slice []*Postcode
	var object *Postcode

	if singular {
		var ok bool
		object, ok = maybePostcode.(*Postcode)
		if !ok {
			object = new(Postcode)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostcode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostcode))
			}
		}
	} else {
		s, ok := maybePostcode.(*[]*Postcode)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostcode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostcode))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postcodeR{}
		}
		if !queries.IsNil(object.Sa3ID) {
			args = append(args, object.Sa3ID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postcodeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Sa3ID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Sa3ID) {
				args = append(args, obj.Sa3ID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sa3`),
		qm.WhereIn(`sa3.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sa3")
	}

	var resultSlice []*Sa3
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sa3")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sa3")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sa3")
	}

	if len(sa3AfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sa3 = foreign
		if foreign.R == nil {
			foreign.R = &sa3R{}
		}
		foreign.R.Postcodes = append(foreign.R.Postcodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Sa3ID, foreign.ID) {
				local.R.Sa3 = foreign
				if foreign.R == nil {
					foreign.R = &sa3R{}
				}
				foreign.R.Postcodes = append(foreign.R.Postcodes, local)
				break
			}
		}
	}

	return nil
}

// LoadSa4 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postcodeL) LoadSa4(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostcode interface{}, mods queries.Applicator) error {
	var slice []*Postcode
	var object *Postcode

	if singular {
		var ok bool
		object, ok = maybePostcode.(*Postcode)
		if !ok {
			object = new(Postcode)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostcode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostcode))
			}
		}
	} else {
		s, ok := maybePostcode.(*[]*Postcode)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostcode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostcode))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postcodeR{}
		}
		if !queries.IsNil(object.Sa4ID) {
			args = append(args, object.Sa4ID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postcodeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Sa4ID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Sa4ID) {
				args = append(args, obj.Sa4ID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sa4`),
		qm.WhereIn(`sa4.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sa4")
	}

	var resultSlice []*Sa4
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sa4")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sa4")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sa4")
	}

	if len(sa4AfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sa4 = foreign
		if foreign.R == nil {
			foreign.R = &sa4R{}
		}
		foreign.R.Postcodes = append(foreign.R.Postcodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Sa4ID, foreign.ID) {
				local.R.Sa4 = foreign
				if foreign.R == nil {
					foreign.R = &sa4R{}
				}
				foreign.R.Postcodes = append(foreign.R.Postcodes, local)
				break
			}
		}
	}

	return nil
}

// LoadState allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postcodeL) LoadState(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostcode interface{}, mods queries.Applicator) error {
	var slice []*Postcode
	var object *Postcode

	if singular {
		var ok bool
		object, ok = maybePostcode.(*Postcode)
		if !ok {
			object = new(Postcode)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostcode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostcode))
			}
		}
	} else {
		s, ok := maybePostcode.(*[]*Postcode)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostcode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostcode))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postcodeR{}
		}
		args = append(args, object.StateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postcodeR{}
			}

			for _, a := range args {
				if a == obj.StateID {
					continue Outer
				}
			}

			args = append(args, obj.StateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`state`),
		qm.WhereIn(`state.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load State")
	}

	var resultSlice []*State
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice State")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for state")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for state")
	}

	if len(stateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.State = foreign
		if foreign.R == nil {
			foreign.R = &stateR{}
		}
		foreign.R.Postcodes = append(foreign.R.Postcodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StateID == foreign.ID {
				local.R.State = foreign
				if foreign.R == nil {
					foreign.R = &stateR{}
				}
				foreign.R.Postcodes = append(foreign.R.Postcodes, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganisations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (postcodeL) LoadOrganisations(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostcode interface{}, mods queries.Applicator) error {
	var slice []*Postcode
	var object *Postcode

	if singular {
		var ok bool
		object, ok = maybePostcode.(*Postcode)
		if !ok {
			object = new(Postcode)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostcode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostcode))
			}
		}
	} else {
		s, ok := maybePostcode.(*[]*Postcode)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostcode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostcode))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &postcodeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postcodeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organisation`),
		qm.WhereIn(`organisation.postcode_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organisation")
	}

	var resultSlice []*Organisation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organisation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organisation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organisation")
	}

	if len(organisationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Organisations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organisationR{}
			}
			foreign.R.Postcode = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PostcodeID) {
				local.R.Organisations = append(local.R.Organisations, foreign)
				if foreign.R == nil {
					foreign.R = &organisationR{}
				}
				foreign.R.Postcode = local
				break
			}
		}
	}

	return nil
}

// SetSa3 of the postcode to the related item.
// Sets o.R.Sa3 to related.
// Adds o to related.R.Postcodes.
func (o *Postcode) SetSa3(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sa3) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"postcode\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sa3_id"}),
		strmangle.WhereClause("\"", "\"", 2, postcodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Sa3ID, related.ID)
	if o.R == nil {
		o.R = &postcodeR{
			Sa3: related,
		}
	} else {
		o.R.Sa3 = related
	}

	if related.R == nil {
		related.R = &sa3R{
			Postcodes: PostcodeSlice{o},
		}
	} else {
		related.R.Postcodes = append(related.R.Postcodes, o)
	}

	return nil
}

// RemoveSa3 relationship.
// Sets o.R.Sa3 to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Postcode) RemoveSa3(ctx context.Context, exec boil.ContextExecutor, related *Sa3) error {
	var err error

	queries.SetScanner(&o.Sa3ID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("sa3_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Sa3 = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Postcodes {
		if queries.Equal(o.Sa3ID, ri.Sa3ID) {
			continue
		}

		ln := len(related.R.Postcodes)
		if ln > 1 && i < ln-1 {
			related.R.Postcodes[i] = related.R.Postcodes[ln-1]
		}
		related.R.Postcodes = related.R.Postcodes[:ln-1]
		break
	}
	return nil
}

// SetSa4 of the postcode to the related item.
// Sets o.R.Sa4 to related.
// Adds o to related.R.Postcodes.
func (o *Postcode) SetSa4(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sa4) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"postcode\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sa4_id"}),
		strmangle.WhereClause("\"", "\"", 2, postcodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Sa4ID, related.ID)
	if o.R == nil {
		o.R = &postcodeR{
			Sa4: related,
		}
	} else {
		o.R.Sa4 = related
	}

	if related.R == nil {
		related.R = &sa4R{
			Postcodes: PostcodeSlice{o},
		}
	} else {
		related.R.Postcodes = append(related.R.Postcodes, o)
	}

	return nil
}

// RemoveSa4 relationship.
// Sets o.R.Sa4 to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Postcode) RemoveSa4(ctx context.Context, exec boil.ContextExecutor, related *Sa4) error {
	var err error

	queries.SetScanner(&o.Sa4ID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("sa4_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Sa4 = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Postcodes {
		if queries.Equal(o.Sa4ID, ri.Sa4ID) {
			continue
		}

		ln := len(related.R.Postcodes)
		if ln > 1 && i < ln-1 {
			related.R.Postcodes[i] = related.R.Postcodes[ln-1]
		}
		related.R.Postcodes = related.R.Postcodes[:ln-1]
		break
	}
	return nil
}

// SetState of the postcode to the related item.
// Sets o.R.State to related.
// Adds o to related.R.Postcodes.
func (o *Postcode) SetState(ctx context.Context, exec boil.ContextExecutor, insert bool, related *State) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"postcode\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"state_id"}),
		strmangle.WhereClause("\"", "\"", 2, postcodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StateID = related.ID
	if o.R == nil {
		o.R = &postcodeR{
			State: related,
		}
	} else {
		o.R.State = related
	}

	if related.R == nil {
		related.R = &stateR{
			Postcodes: PostcodeSlice{o},
		}
	} else {
		related.R.Postcodes = append(related.R.Postcodes, o)
	}

	return nil
}

// AddOrganisations adds the given related objects to the existing relationships
// of the postcode, optionally inserting them as new records.
// Appends related to o.R.Organisations.
// Sets related.R.Postcode appropriately.
func (o *Postcode) AddOrganisations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organisation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PostcodeID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organisation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"postcode_id"}),
				strmangle.WhereClause("\"", "\"", 2, organisationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PostcodeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &postcodeR{
			Organisations: related,
		}
	} else {
		o.R.Organisations = append(o.R.Organisations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organisationR{
				Postcode: o,
			}
		} else {
			rel.R.Postcode = o
		}
	}
	return nil
}

// SetOrganisations removes all previously related items of the
// postcode replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Postcode's Organisations accordingly.
// Replaces o.R.Organisations with related.
// Sets related.R.Postcode's Organisations accordingly.
func (o *Postcode) SetOrganisations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organisation) error {
	query := "update \"organisation\" set \"postcode_id\" = null where \"postcode_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Organisations {
			queries.SetScanner(&rel.PostcodeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Postcode = nil
		}
		o.R.Organisations = nil
	}

	return o.AddOrganisations(ctx, exec, insert, related...)
}

// RemoveOrganisations relationships from objects passed in.
// Removes related items from R.Organisations (uses pointer comparison, removal does not keep order)
// Sets related.R.Postcode.
func (o *Postcode) RemoveOrganisations(ctx context.Context, exec boil.ContextExecutor, related ...*Organisation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PostcodeID, nil)
		if rel.R != nil {
			rel.R.Postcode = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("postcode_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Organisations {
			if rel != ri {
				continue
			}

			ln := len(o.R.Organisations)
			if ln > 1 && i < ln-1 {
				o.R.Organisations[i] = o.R.Organisations[ln-1]
			}
			o.R.Organisations = o.R.Organisations[:ln-1]
			break
		}
	}

	return nil
}

// Postcodes retrieves all the records using an executor.
func Postcodes(mods ...qm.QueryMod) postcodeQuery {
	mods = append(mods, qm.From("\"postcode\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"postcode\".*"})
	}

	return postcodeQuery{q}
}

// FindPostcode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostcode(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Postcode, error) {
	postcodeObj := &Postcode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"postcode\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, postcodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from postcode")
	}

	if err = postcodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postcodeObj, err
	}

	return postcodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Postcode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no postcode provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postcodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postcodeInsertCacheMut.RLock()
	cache, cached := postcodeInsertCache[key]
	postcodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postcodeAllColumns,
			postcodeColumnsWithDefault,
			postcodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postcodeType, postcodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postcodeType, postcodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"postcode\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"postcode\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into postcode")
	}

	if !cached {
		postcodeInsertCacheMut.Lock()
		postcodeInsertCache[key] = cache
		postcodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Postcode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Postcode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postcodeUpdateCacheMut.RLock()
	cache, cached := postcodeUpdateCache[key]
	postcodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postcodeAllColumns,
			postcodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update postcode, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"postcode\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, postcodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postcodeType, postcodeMapping, append(wl, postcodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update postcode row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for postcode")
	}

	if !cached {
		postcodeUpdateCacheMut.Lock()
		postcodeUpdateCache[key] = cache
		postcodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postcodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for postcode")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for postcode")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostcodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"postcode\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, postcodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in postcode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all postcode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Postcode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no postcode provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postcodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postcodeUpsertCacheMut.RLock()
	cache, cached := postcodeUpsertCache[key]
	postcodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			postcodeAllColumns,
			postcodeColumnsWithDefault,
			postcodeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postcodeAllColumns,
			postcodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert postcode, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(postcodePrimaryKeyColumns))
			copy(conflict, postcodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"postcode\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(postcodeType, postcodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postcodeType, postcodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert postcode")
	}

	if !cached {
		postcodeUpsertCacheMut.Lock()
		postcodeUpsertCache[key] = cache
		postcodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Postcode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Postcode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Postcode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postcodePrimaryKeyMapping)
	sql := "DELETE FROM \"postcode\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from postcode")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for postcode")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postcodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no postcodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from postcode")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for postcode")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostcodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postcodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"postcode\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postcodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from postcode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for postcode")
	}

	if len(postcodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Postcode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostcode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostcodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostcodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"postcode\".* FROM \"postcode\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postcodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PostcodeSlice")
	}

	*o = slice

	return nil
}

// PostcodeExists checks if the Postcode row exists.
func PostcodeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"postcode\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if postcode exists")
	}

	return exists, nil
}

// Exists checks if the Postcode row exists.
func (o *Postcode) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostcodeExists(ctx, exec, o.ID)
}
